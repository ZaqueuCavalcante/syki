@using Syki.Front.Features.Cross.GetUserNotifications

@namespace Syki.Front.Shared

@inherits LayoutComponentBase

<MudPopoverProvider />
<MudSnackbarProvider />
<MudThemeProvider IsDarkMode="@_isDark" Theme="@SykiTheme" />
<MudDialogProvider CloseOnEscapeKey="true" CloseButton="true" />

<AuthorizeView>
    <Authorized>
        <MudLayout>
            <MudAppBar Elevation="0" Dense="true" ToolBarClass="pl-1 pr-1">
                @if (_breakpoint != Breakpoint.Xs)
                {
                    <MudIconButton OnClick="@ToggleLeftOpen" Icon="@Icons.Material.Filled.Menu" Color="Color.Inherit" />
                }
                <HomeButton />
                <MudSpacer />
                <AuthorizeView Roles="Teacher, Student" Context="authContext">
                    <NotificationsIconButton />
                </AuthorizeView>
                <ThemeIconButton @bind-IsDark="@_isDark" OnClick="@ToggleTheme" />
                <MudIconButton OnClick="@ToggleRightOpen" Icon="@Icons.Material.Filled.Settings" Color="Color.Inherit" />
            </MudAppBar>
            <MudDrawer @bind-Open="@_leftOpen" ClipMode="DrawerClipMode.Always" Elevation="2">
                <NavMenu />
            </MudDrawer>
            <MudDrawer Anchor="Anchor.Right" @bind-Open="@_rightOpen" ClipMode="DrawerClipMode.Always" Variant="DrawerVariant.Temporary" OverlayAutoClose="true" Elevation="2" Width="160px">
                <SettingsMenu OnLogoutClick="@Logout" />
            </MudDrawer>
            <MudMainContent Class="pb-12">
                @Body
                @if (_breakpoint == Breakpoint.Xs)
                {
                    <MudFab OnClick="@ToggleLeftOpen" Size="@Size.Large" Style="position:fixed; bottom:15px; right:25px;" Color="Color.Primary" StartIcon="@Icons.Material.Filled.Menu" />
                }
            </MudMainContent>
        </MudLayout>
    </Authorized>
    <NotAuthorized>
        @if (IsAnonymous())
        {
            <MudAppBar Elevation="1" Dense="true">
                <MudStack Row="true" Class="d-flex justify-space-around flex-grow-1">
                    <HomeButton />
                    <MudSpacer />
                    <ThemeIconButton @bind-IsDark="@_isDark" OnClick="@ToggleTheme" />
                    <LoginButton />
                    <MudButton
                        Href="/register"
                        Target="_self"
                        IconSize="Size.Large"
                        Variant="Variant.Text"
                        Style="color: white; margin-left: -11px;"
                    >
                        Cadastro
                    </MudButton>
                </MudStack>
            </MudAppBar>
            <CascadingValue Name="IsDarkTheme" Value="@_isDark">
                <MudMainContent>
                    @Body
                </MudMainContent>
            </CascadingValue>
        }
        else
        {
            <SykiRedirect />
        }
    </NotAuthorized>
</AuthorizeView>

@inject NavigationManager Nav
@inject AuthManager AuthManager
@inject LogoutClient LogoutClient
@inject SignalRConnectionManager SignalR
@inject ILocalStorageService LocalStorage
@inject SykiAuthStateProvider AuthStateProvider
@inject ApexCharts.IApexChartService ApexChartService
@inject IBrowserViewportService BrowserViewportService

@code
{
    [CascadingParameter]
    public Task<AuthenticationState> AuthState { get; set; }

    private MudTheme SykiTheme = new MudTheme()
    {
        LayoutProperties = new LayoutProperties()
        {
            DrawerWidthLeft = "180px"
        }
    };

    private bool _isDark = true;
    private bool _leftOpen = true;
    private bool _rightOpen = false;
    private Breakpoint _breakpoint;

    private bool IsAnonymous()
    {
        var uri = Nav.Uri.ToLower();
        return uri.EndsWith("/") || uri.Contains("register") || uri.Contains("login") || uri.Contains("reset-password");
    }

    private void ToggleLeftOpen()
    {
        _leftOpen = !_leftOpen;
    }

    private void ToggleRightOpen()
    {
        _rightOpen = !_rightOpen;
    }

    protected override async Task OnInitializedAsync()
    {
        _breakpoint = await BrowserViewportService.GetCurrentBreakpointAsync();
        var isDark = await LocalStorage.GetItemAsync<string>("IsDark");
        _isDark = isDark == null || bool.Parse(isDark);
    }

    protected override async Task OnParametersSetAsync()
    {
        var user = await AuthManager.GetUser();
        if (user.Role.IsIn(UserRole.Teacher, UserRole.Student))
        {
            SykiTheme.LayoutProperties.DrawerWidthLeft = "260px";
        }
        else
        {
            SykiTheme.LayoutProperties.DrawerWidthLeft = "180px";
        }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await base.OnAfterRenderAsync(firstRender);
        
        await UpdateChartsTheme();
    }
    
    private async Task ToggleTheme()
    {
        _isDark = !_isDark;

        await UpdateChartsTheme();

        await LocalStorage.SetItemAsync("IsDark", _isDark.ToString()); 
    }

    private async Task UpdateChartsTheme()
    {
        var options = new ApexCharts.ApexChartBaseOptions
        {
            Theme = new ApexCharts.Theme
            {
                Mode = _isDark ? ApexCharts.Mode.Dark : ApexCharts.Mode.Light
            }
        };
        
        await ApexChartService.SetGlobalOptionsAsync(options, true);
    }

    private async Task Logout()
    {
        _rightOpen = false;
        await LogoutClient.Logout();
        await LocalStorage.RemoveItemAsync("User");
        await SignalR.StopAsync();
        AuthStateProvider.MarkUserAsLoggedOut();
        Nav.NavigateTo("/");
    }
}

@using Syki.Front.Features.Academic.CreateCourseOffering

@namespace Syki.Front.Pages.Academic

@page "/academic/course-offerings"
@attribute [Authorize(Roles = "Academic")]

<SykiPageTitle Title="Ofertas" />

<MudContainer Class="my-4 px-4">
    <SykiPageHeader Icon="@Icons.Material.Filled.PlaylistAddCheck" Title="Ofertas" ButtonText="Nova Oferta" OnClick="@OpenDialog"/>
    <SykiPageAlert Text="Uma oferta de curso pode acontecer a cada período, com variações de campus, turno e grade." />
    <MudContainer Class="px-0 mb-4">
        <MudDataGrid Class="pa-4" Items="@_ofertas" QuickFilter="@_quickFilter" Hover Loading="@_loading" Dense RowsPerPage="10">
            <ToolBarContent>
                <SykiDataGridSearchTextField @bind-Value="@_searchString" Placeholder="Busque por qualquer atributo" />
            </ToolBarContent>
            <Columns>
                <PropertyColumn Property="x => x.Campus" Title="Campus" />
                <PropertyColumn Property="x => x.Period" Title="Período" />
                <PropertyColumn Property="x => x.Shift.GetDescription()" Title="Turno" />
                <PropertyColumn Property="x => x.Course" Title="Curso" />
                <PropertyColumn Property="x => x.CourseCurriculum" Title="Grade" />
            </Columns>
            <NoRecordsContent>
                @(GetNotFoundMessage())
            </NoRecordsContent>
            <PagerContent>
                <SykiDataGridPager T="CourseOfferingOut" />
            </PagerContent>
        </MudDataGrid>
    </MudContainer>
</MudContainer>

@inject IDialogService DialogService
@inject GetCourseOfferingsClient GetCourseOfferingsClient
@inject IBrowserViewportService BrowserViewportService

@code
{
    private bool _loading;
    private string _searchString;
    private List<CourseOfferingOut> _ofertas = [];

    protected override async Task OnInitializedAsync()
    {
        _loading = true;
        _ofertas = await GetCourseOfferingsClient.Get();
        _loading = false;
    }

    private Func<CourseOfferingOut, bool> _quickFilter => x =>
        _searchString.IsIn(x.Campus, x.Period, x.Shift.GetDescription(), x.Course, x.CourseCurriculum);

    private async Task OpenDialog()
    {
        var breakpoint = await BrowserViewportService.GetCurrentBreakpointAsync();
        var options = new DialogOptions {
            MaxWidth = MaxWidth.Small,
            FullWidth = true,
            FullScreen = breakpoint == Breakpoint.Xs,
        };
        var dialog = await DialogService.ShowAsync<CreateCourseOfferingDialog>("", options);

        var result = await dialog.Result;

        if (result!.Canceled) return;
        
        await OnInitializedAsync();
    }

    private string GetNotFoundMessage()
    {
        return (_searchString.IsEmpty()) ? "Não existem ofertas cadastradas ainda." : "Nenhuma oferta encontrada.";
    }
}

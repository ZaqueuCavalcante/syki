@using Syki.Front.Features.Academic.GetWebhook

@namespace Syki.Front.Pages.Academic

@page "/academic/webhooks/{id:guid}"
@attribute [Authorize(Roles = "Academic")]

<SykiPageTitle Title="Webhook" />

<MudContainer Class="my-4 px-4">
    <MudCard>
        <MudCardContent>
            <MudStack Row="true" AlignItems="AlignItems.Center">
                <MudIcon Icon="@Icons.Material.Filled.Webhook" Class="mb-1" Size="Size.Large"/>
                <MudText Typo="Typo.h5" Class="mt-1" Style="font-weight: bold">@($"Webhook - {_data.Name}")</MudText>
            </MudStack>
        </MudCardContent>
    </MudCard>

    <MudContainer Class="px-0 my-4">
        <MudGrid Spacing="2">
            <MudItem xs="12" sm="9" md="9" lg="9">
                <InfoCard Icon="@Icons.Material.Filled.Link" Color="@Colors.Pink.Darken1" Title="Url" Content="@_data.Url" />
            </MudItem>
            <MudItem xs="12" sm="3" md="3" lg="3">
                <InfoCard Icon="@Icons.Material.Filled.LockPerson" Color="@Colors.Green.Darken1" Title="Autenticação" Content="@_data.AuthenticationType.GetDescription()" />
            </MudItem>
            <MudItem xs="12" sm="4" md="4" lg="4">
                <InfoCard Icon="@Icons.Material.Filled.AccessTime" Color="@Colors.BlueGray.Darken1" Title="Criação" Content="@_data.CreatedAt.ToMinuteString()" />
            </MudItem>
            <MudItem xs="12" sm="4" md="4" lg="4">
                <InfoCard Icon="@Icons.Material.Filled.StickyNote2" Color="@Colors.Blue.Darken1" Title="Eventos" Content="@_data.EventsCount.ToThousandSeparated()" />
            </MudItem>
            <MudItem xs="12" sm="4" md="4" lg="4">
                <InfoCard Icon="@Icons.Material.Filled.CallMade" Color="@Colors.Indigo.Darken1" Title="Chamadas" Content="@_data.CallsCount.ToThousandSeparated()" />
            </MudItem>
        </MudGrid>
    </MudContainer>

    <MudContainer Class="px-0 my-4">
        <style>
            .mud-table-toolbar {
                height: auto;
            }
        </style>
        <MudTable
            Class="mb-4"
            Dense="true"
            Hover="true"
            RowsPerPage="10"
            Loading="@_loading"
            Items="@_calls"
            T="GetWebhookCallOut"
            Breakpoint="Breakpoint.Sm"
        >
            <ToolBarContent>
                <MudStack Style="width: 100%">
                    <MudStack Row="true" AlignItems="AlignItems.Center" Class="mt-4" Style="width: 100%">
                        <MudIcon Icon="@Icons.Material.Filled.CallMade" Class="mb-1" Size="Size.Medium"/>
                        <MudText Typo="Typo.h6" Style="font-weight: bold">Chamadas</MudText>
                    </MudStack>
                    <MudCard Class="mt-0 mb-4 mr-2" Style="width: 100%" Elevation="0" Outlined="true">
                        <MudCardContent>
                            <MudGrid Spacing="2">
                                <MudItem xs="12" sm="3" md="3" lg="3">
                                    <MudSelect
                                        Dense="true"
                                        Margin="Margin.Dense"
                                        Variant="Variant.Outlined"
                                        @bind-Value="@_statusFilter"
                                        Label="Status"
                                        Clearable="true"
                                        AdornmentColor="Color.Primary
                                    ">
                                        @foreach (WebhookCallStatus? item in Enum.GetValues<WebhookCallStatus>())
                                        {
                                            <MudSelectItem Value="@item">
                                                <MudStack Row="true" AlignItems="AlignItems.Center">
                                                    <MudIcon Class="mb-1" Icon="@item.Value.GetIcon()" Color="@item.Value.GetColor()" Size="Size.Small"/>
                                                    <MudText>@item.GetDescription()</MudText>
                                                </MudStack>
                                            </MudSelectItem>
                                        }
                                    </MudSelect>
                                </MudItem>

                                <MudItem xs="12" sm="4" md="4" lg="4">
                                    <MudSelect
                                        Dense="true"
                                        Margin="Margin.Dense"
                                        Variant="Variant.Outlined"
                                        @bind-Value="@_eventTypeFilter"
                                        Label="Evento"
                                        Clearable="true"
                                        AdornmentColor="Color.Primary
                                    ">
                                        @foreach (WebhookEventType? item in Enum.GetValues<WebhookEventType>())
                                        {
                                            <MudSelectItem Value="@item">
                                                <MudText>@item.GetDescription()</MudText>
                                            </MudSelectItem>
                                        }
                                    </MudSelect>
                                </MudItem>

                                <MudItem xs="12" sm="5" md="5" lg="5" Class="d-flex justify-end align-center pt-1">
                                <MudStack Row="true" AlignItems="AlignItems.Center" Spacing="1">
                                        <MudChip T="string" Variant="Variant.Text" Color="Color.Primary" Class="mt-1 pt-1">@_calls.Count.ToThousandSeparated()</MudChip>
                                        <MudButton
                                            OnClick="@Filter"
                                            Size="Size.Medium"
                                            Color="Color.Primary"
                                            IconSize="Size.Medium"
                                            Variant="Variant.Filled"
                                            StartIcon="@Icons.Material.Outlined.FilterList"
                                        >
                                            Filtrar
                                        </MudButton>
                                    </MudStack>
                                </MudItem>
                            </MudGrid>
                        </MudCardContent>
                    </MudCard>
                </MudStack>
            </ToolBarContent>

            <HeaderContent>
                <MudTh>Evento</MudTh>
                <MudTh>Criação</MudTh>
                <MudTh>Status</MudTh>
                <MudTh>Tentativas</MudTh>
                <MudTh></MudTh>
            </HeaderContent>
            <RowTemplate>
                <MudTd DataLabel="Evento">@context.Event.GetDescription()</MudTd>
                <MudTd DataLabel="Criação">@context.CreatedAt.ToMinuteString()</MudTd>
                <MudTd DataLabel="Status">
                    <WebhookCallStatusChip Status="@context.Status" />
                </MudTd>
                <MudTd DataLabel="Tentativas">@context.AttemptsCount.ToThousandSeparated()</MudTd>
                <MudTd>
                    <MudIconButton Size="@Size.Small" Icon="@Icons.Material.Filled.RemoveRedEye" Href="@($"/academic/webhooks/calls/{context.Id}")" />
                </MudTd>
            </RowTemplate>
            <NoRecordsContent>
                @(GetNotFoundMessage())
            </NoRecordsContent>
            <PagerContent>
                <SykiTablePager />
            </PagerContent>
        </MudTable>
    </MudContainer>
</MudContainer>

@inject NavigationManager Nav
@inject GetWebhookClient GetWebhookClient

@code
{
	[Parameter]
	public Guid Id { get; set; }

    private bool _loading;
    private GetWebhookOut _data = new();
    private List<GetWebhookCallOut> _calls = [];

    private WebhookCallStatus? _statusFilter;
    private WebhookEventType? _eventTypeFilter;

    protected override async Task OnInitializedAsync()
    {
        _loading = true;
        _data = await GetWebhookClient.Get(Id);
        _calls = _data.Calls.Select(x => x).ToList();
        _loading = false;
    }

    private void Filter()
    {
        _loading = true;
        _calls = _data.Calls.Where(x =>
            (_statusFilter == null || x.Status == _statusFilter) &&
            (_eventTypeFilter == null || x.Event == _eventTypeFilter)
        ).ToList();
        _loading = false;
    }

    private string GetNotFoundMessage()
    {
        return "Este webhook não possui chamadas.";
    }
}

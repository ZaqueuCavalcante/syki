@using Syki.Front.Features.Teacher.CreateLessonAttendance

@namespace Syki.Front.Pages.Teacher

<MudContainer Class="mb-4 px-0">
    <MudCard Class="mb-4 py-2 px-2">
        <MudCardContent Class="py-1">
            @if (_loading)
            {
                <MudSkeleton Animation="Animation.Wave" />
            }
            else
            {
                <MudGrid Class="align-center">
                    <MudItem xs="12" sm="6" md="6" lg="6">
                        <MudStack Row="true" AlignItems="AlignItems.Center">
                            <MudStack Row="true" AlignItems="AlignItems.Center" Spacing="3">
                                <MudText Typo="Typo.h6">Aula @_classLesson.Number <b>·</b> @_classLesson.Date.FormatBr() <b>·</b> @_classLesson.Schedule</MudText>
                            </MudStack>
                        </MudStack>
                    </MudItem>
                    <MudItem xs="12" sm="4" md="4" lg="4">
                        <MudProgressLinear Color="Color.Primary" Rounded="true" Size="Size.Large" Value="@decimal.ToDouble(_classLesson.Frequency)" Style="height: 24px">
                            <MudText Typo="Typo.body1">
                                <b>@_classLesson.Frequency.Format()%</b>
                            </MudText>
                        </MudProgressLinear>
                    </MudItem>
                    <MudItem xs="12" sm="2" md="2" lg="2" Class="d-flex justify-end">
                        <MudButton
                            StartIcon="@Icons.Material.Outlined.Edit"
                            IconSize="Size.Large"
                            Variant="Variant.Filled"
                            Style="height: 40px;"
                            Color="Color.Primary"
                            @onclick="@OnEditLessonClick">
                            Editar
                        </MudButton>
                    </MudItem>
                </MudGrid>
            }
        </MudCardContent>
    </MudCard>

    <style>.mud-table-toolbar { height: auto }</style>
    <MudTable
        T="GetTeacherLessonAttendanceOut"
        Class="pa-4"
        Items="@_attendances"
        Filter="@_quickFilter"
        Hover="true"
        Dense="true"
        Loading="@_loading"
        RowsPerPage="100"
        ContainerClass="pt-0"
    >
        <ToolBarContent>
            <MudGrid Class="align-center" Spacing="3">
                <MudItem xs="12" sm="5" md="5" lg="5">
                    @if (_showButtons)
                    {
                        <MudStack Row="true" AlignItems="AlignItems.Center" Spacing="3">
                            <MudButton OnClick="@SelectAll" Variant="Variant.Filled" StartIcon="@Icons.Material.Filled.CheckBox" Size="Size.Small">Todos</MudButton>
                            <MudButton OnClick="@UnselectAll" Variant="Variant.Filled" StartIcon="@Icons.Material.Filled.CheckBoxOutlineBlank" Size="Size.Small">Nenhum</MudButton>
                        </MudStack>
                    }
                </MudItem>
                <MudItem xs="12" sm="7" md="7" lg="7" Class="d-flex justify-end">
                    <SykiDataGridSearchTextField @bind-Value="@_searchString" Placeholder="Busque por nome"/>
                </MudItem>
            </MudGrid>
        </ToolBarContent>
        <HeaderContent>
            <MudTh>Nome</MudTh>
            <MudTh>Presente</MudTh>
        </HeaderContent>
        <RowTemplate>
            <MudTd DataLabel="Nome">@context.StudentName</MudTd>
            <MudTd DataLabel="Presente">
                <MudCheckBox
                    T="bool"
                    Class="pl-7 pr-1"
                    Dense="true"
                    Size="Size.Small"
                    Color="Color.Success"
                    Value="@context.Present"
                    ValueChanged="x => { context.Present = x; CheckChanged(); }"/>
            </MudTd>
        </RowTemplate>
        <NoRecordsContent>
            @(GetNotFoundMessage())
        </NoRecordsContent>
        <LoadingContent>
            @if (_breakpoint == Breakpoint.Xs)
            {
                <MudProgressLinear Color="Color.Info" Indeterminate="true" />
            }
        </LoadingContent>
        <PagerContent>
            <MudDivider/>
            @if (_showButtons)
            {
                <MudStack Row="true" Class="mt-4">
                    <MudSpacer/>
                    <DialogSaveButton Class="mr-2" OnClick="@SaveFrequency"/>
                </MudStack>
            }
        </PagerContent>
    </MudTable>
</MudContainer>

@inject ISnackbar Snackbar
@inject IDialogService DialogService
@inject IBrowserViewportService BrowserViewportService
@inject GetTeacherClassLessonsClient GetTeacherClassLessonsClient
@inject CreateLessonAttendanceClient CreateLessonAttendanceClient
@inject GetTeacherLessonAttendancesClient GetTeacherLessonAttendancesClient

@code
{
	[Parameter]
	public Guid ClassId { get; set; }

    private Breakpoint _breakpoint;

    private bool _loading;
    private bool _showButtons;
    private string _searchString;
    private ClassLessonOut _classLesson = new();
    private List<ClassLessonOut> _lessons = [];
    private List<GetTeacherLessonAttendanceOut> _attendances = [];

    private List<Guid> _initialState = [];

    protected override async Task OnInitializedAsync()
    {
        _loading = true;
        _breakpoint = await BrowserViewportService.GetCurrentBreakpointAsync();
        _lessons = (await GetTeacherClassLessonsClient.Get(ClassId)).Success;
        var id = _lessons.Where(x => x.Date <= DateTime.UtcNow.ToDateOnly()).MaxBy(x => x.Date)?.Id ?? Guid.Empty;
        await SetLesson(id);
        _loading = false;
        _showButtons = true;
    }

    private async Task SetLesson(Guid id)
    {
        _classLesson = _lessons.FirstOrDefault(x => x.Id == id) ?? new();
        _attendances = await GetTeacherLessonAttendancesClient.Get(id);
        _initialState = _attendances.Where(x => x.Present).Select(x => x.StudentId).ToList();
    }

    private void SelectAll()
    {
        _attendances.ForEach(x => x.Present = true);
        CheckChanged();
    }
    private void UnselectAll()
    {
        _attendances.ForEach(x => x.Present = false);
        CheckChanged();
    }

    private void CheckChanged()
    {
        _classLesson.Frequency = GetCurrentFrequency();
    }

    private decimal GetCurrentFrequency()
    {
        var total = _attendances.Count;
        if (total == 0) return 0.00M;
        var presences = _attendances.Count(x => x.Present);
        return 100M*(1M * presences / (1M * total));
    }

    private Task OnEditLessonClick()
    {
        var parameters = new DialogParameters<ClassLessonsDialog>()
        {
            { x => x.Lessons, _lessons },
            { x => x.OnRowClick, EventCallback.Factory.Create<Guid>(this, SetLesson) }
        };

        return DialogService.ShowAsync<ClassLessonsDialog>("", parameters);
    }

    private async Task SaveFrequency()
    {
        var ids = _attendances.Where(x => x.Present).Select(x => x.StudentId).ToList();
        var result = await CreateLessonAttendanceClient.Create(_classLesson.Id, ids);
        if (result.IsSuccess)
        {
            _lessons = (await GetTeacherClassLessonsClient.Get(ClassId)).Success;
            _initialState = _attendances.Where(x => x.Present).Select(x => x.StudentId).ToList();
            Snackbar.Add("Frequência salva com sucesso!", Severity.Success);
        }
        else
        {
            Snackbar.Add(result.Error.Message, Severity.Error);
        }
    }

    private Func<GetTeacherLessonAttendanceOut, bool> _quickFilter => x => _searchString.IsIn(x.StudentName);

    private string GetNotFoundMessage()
    {
        return (_searchString.IsEmpty()) ? "Não existem alunos matriculados ainda." : "Nenhum aluno encontrado.";
    }
}

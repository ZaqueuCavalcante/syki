@using Syki.Front.Features.Academic.GetDisciplines
@using Syki.Front.Features.Academic.CreateDiscipline

@namespace Syki.Front.Pages.Academic

@page "/academic/disciplines"
@attribute [Authorize(Roles = "Academic")]

<SykiPageTitle Title="Disciplinas" />

<MudContainer Class="my-4 px-4">
    <SykiPageHeader Icon="@Icons.Material.Filled.Apps" Title="Disciplinas" ButtonText="Nova Disciplina" OnClick="@OpenDialog" />
    <SykiPageAlert Text="Uma mesma disciplina pode compor a grade de cursos diferentes." />
    <MudContainer Class="px-0 mb-4">
        <MudDataGrid Class="pa-4" Items="@_disciplines" QuickFilter="@_quickFilter" Hover Loading="@_loading" Dense RowsPerPage="10">
            <ToolBarContent>
                <SykiDataGridSearchTextField @bind-Value="@_searchString" Placeholder="Busque por nome ou código" />
            </ToolBarContent>
            <Columns>
                <PropertyColumn Property="x => x.Name" Title="Nome" />
                <PropertyColumn Property="x => x.Code" Title="Código" />
                <PropertyColumn Property="x => x.Teachers.ToThousandSeparated()" Title="Professores" />
            </Columns>
            <NoRecordsContent>
                @(GetNotFoundMessage())
            </NoRecordsContent>
            <PagerContent>
                <SykiDataGridPager T="DisciplineOut"/>
            </PagerContent>
        </MudDataGrid>
    </MudContainer>
</MudContainer>

@inject GetDisciplinesClient Client
@inject IDialogService DialogService
@inject IBrowserViewportService BrowserViewportService

@code
{
    private bool _loading;
    private string _searchString;
    private List<DisciplineOut> _disciplines = [];

    protected override async Task OnInitializedAsync()
    {
        _loading = true;
        _disciplines = await Client.Get();
        _loading = false;
    }

    private async Task OpenDialog()
    {
        var breakpoint = await BrowserViewportService.GetCurrentBreakpointAsync();
        var options = new DialogOptions {
            MaxWidth = MaxWidth.Small,
            FullWidth = true,
            FullScreen = breakpoint == Breakpoint.Xs,
        };
        var dialog = await DialogService.ShowAsync<CreateDisciplineDialog>("", options);

        var result = await dialog.Result;

        if (result!.Canceled) return;
        
        await OnInitializedAsync();
    }
    
    private Func<DisciplineOut, bool> _quickFilter => x => _searchString.IsIn(x.Name, x.Code);

    private string GetNotFoundMessage()
    {
        return (_searchString.IsEmpty()) ? "Não existem disciplinas cadastradas ainda." : "Nenhuma disciplina encontrada.";
    }
}

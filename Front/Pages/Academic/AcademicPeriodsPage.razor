@namespace Syki.Front.Pages.Academic

@page "/academic/academic-periods"
@attribute [Authorize(Roles = "Academic")]

<SykiPageTitle Title="Períodos" />

<MudContainer Class="my-4 px-4">
    <SykiPageHeader Icon="@Icons.Material.Filled.CalendarMonth" Title="Períodos" ButtonText="Período Acadêmico" OnClick="@OpenDialog"/>
    <SykiPageAlert Text="Utilize os períodos acadêmicos para organizar as informações durante o ano letivo." />
    <MudContainer Class="px-0 mb-4">
        <MudDataGrid Class="pa-4" Items="@_periods" QuickFilter="@_quickFilter" Hover Loading="@_loading" Dense RowsPerPage="10">
            <ToolBarContent>
                <SykiDataGridSearchTextField @bind-Value="@_searchString" Placeholder="Busque por ano" />
            </ToolBarContent>
            <Columns>
                <PropertyColumn Property="x => x.Id" Title="Id" />
                <PropertyColumn Property="x => x.StartAt" Title="Início" />
                <PropertyColumn Property="x => x.EndAt" Title="Fim" />
            </Columns>
            <NoRecordsContent>
                @(GetNotFoundMessage())
            </NoRecordsContent>
            <PagerContent>
                <SykiDataGridPager T="@AcademicPeriodOut" />
            </PagerContent>
        </MudDataGrid>
    </MudContainer>
</MudContainer>

@inject IDialogService DialogService
@inject GetAcademicPeriodsClient Client
@inject IBrowserViewportService BrowserViewportService

@code
{
    private bool _loading;
    private string _searchString;
    private List<AcademicPeriodOut> _periods = [];

    protected override async Task OnInitializedAsync()
    {
        _loading = true;
        _periods = await Client.Get();
        _loading = false;
    }

    private Func<AcademicPeriodOut, bool> _quickFilter => x => _searchString.IsIn(x.Id);

    private async Task OpenDialog()
    {
        var breakpoint = await BrowserViewportService.GetCurrentBreakpointAsync();
        var options = new DialogOptions {
            MaxWidth = MaxWidth.ExtraSmall,
            FullWidth = true,
            FullScreen = breakpoint == Breakpoint.Xs,
        };

        var dialog = await DialogService.ShowAsync<CreateAcademicPeriodDialog>("", options);

        var result = await dialog.Result;

        if (result!.Canceled) return;
        
        await OnInitializedAsync();
    }

    private string GetNotFoundMessage()
    {
        return (_searchString.IsEmpty()) ? "Não existem períodos acadêmicos cadastrados ainda." : "Nenhum período acadêmico encontrado.";
    }
}

@namespace Syki.Front.Features.Academic.CreateCourseCurriculum

<MudDialog Class="pb-2" DefaultFocus="DefaultFocus.None">
    <TitleContent>
        <SykiDialogTitle Text="Nova Grade" />
    </TitleContent>
    <DialogContent>
        <MudForm @ref="@_form" Class="pt-1" Spacing="0">
            <MudGrid Spacing="2">
                <MudItem xs="12" sm="12" md="6" lg="6">
                    <SykiTextField Label="Nome" AutoFocus @bind-Value="@data.Name" Class="pb-0"/>
                </MudItem>
                <MudItem xs="12" sm="12" md="6" lg="6">
                    <MudSelect
                        Dense
                        Margin="Margin.Dense"
                        Variant="Variant.Outlined"
                        Value="@_course"
                        ValueChanged="@((CreateCourseOut newValue) => HandleSelectCourse(newValue))"
                        Label="Curso"
                        Required
                        RequiredError="Informe!"
                        AdornmentColor="Color.Primary">
                        @foreach (CreateCourseOut? item in Courses)
                        {
                            <MudSelectItem Value="@item">@item.Name</MudSelectItem>
                        }
                        @if (Courses.Count == 0)
                        {
                            <MudSelectItem Value="@_course" Disabled>NÃ£o existem cursos com disciplinas ainda.</MudSelectItem>
                        }
                    </MudSelect>
                </MudItem>
            </MudGrid>

            <MudDivider Class="my-4"/>

            <MudGrid Spacing="0">
                <MudItem xs="12" sm="12" md="12" lg="12">
                    <CascadingValue Name="Options" Value="@Options">
                        @foreach (var discipline in Disciplines)
                        {
                            <CourseCurriculumDiscipline Data="@discipline" OnDeleteClick="@DeleteGradeDiscipline"/>
                            @if (_breakpoint == Breakpoint.Xs)
                            {
                                <MudDivider Class="my-2"/>
                            }
                        }
                    </CascadingValue>
                </MudItem>
                <MudItem xs="12" sm="12" md="12" lg="12">
                    <MudButton
                        Disabled="(GetNewDisciplineDisabled())"
                        StartIcon="@Icons.Material.Outlined.Add"
                        IconSize="Size.Large"
                        Variant="Variant.Outlined"
                        FullWidth
                        Class="mt-2 border-dashed border-2 mud-border-secundary"
                        Style="max-width: fit-content"
                        Color="Color.Primary"
                        @onclick="@NewGradeDiscipline">
                        NOVA DISCIPLINA
                    </MudButton>
                </MudItem>
            </MudGrid>
        </MudForm>
    </DialogContent>
    <DialogActions>
        <DialogCancelButton OnClick="@Cancel" />
        <SykiProgressCircular Loading="@_loading" />
        <DialogSaveButton OnClick="@Submit" />
    </DialogActions>
</MudDialog>

@inject ISnackbar Snackbar
@inject IBrowserViewportService BrowserViewportService
@inject GetCourseDisciplinesClient GetCourseDisciplinesClient
@inject CreateCourseCurriculumClient CreateCourseCurriculumClient
@inject GetCoursesWithDisciplinesClient GetCoursesWithDisciplinesClient

@code
{
    [CascadingParameter]
    IMudDialogInstance MudDialog { get; set; }

    private MudForm _form;
    private bool _loading;

    private CreateCourseOut? _course;
    List<CreateCourseOut> Courses = [];

    List<CourseDisciplineOut> Options = [];
    List<CourseCurriculumDisciplineFillable> Disciplines = [];

    private Breakpoint _breakpoint;
    CreateCourseCurriculumIn data = new();

    protected override async Task OnInitializedAsync()
    {
        _breakpoint = await BrowserViewportService.GetCurrentBreakpointAsync();
        Courses = await GetCoursesWithDisciplinesClient.Get();
    }

    void NewGradeDiscipline()
    {
        Disciplines.Add(new() { Id = Guid.CreateVersion7() });
    }

    void DeleteGradeDiscipline(Guid id)
    {
        Disciplines.Remove(Disciplines.First(f => f.Id == id));
        if (Options.Any(x => x.Id == id))
        {
            Options.First(d => d.Id == id).IsSelected = false;
        }
    }

    bool GetNewDisciplineDisabled()
    {
        return _course == null || Options.Count == Disciplines.Count;
    }

    async Task HandleSelectCourse(CreateCourseOut newValue)
    {
        _course = newValue;
        Options = await GetCourseDisciplinesClient.Get(_course!.Id);
        Disciplines = [];
    }

    async Task Submit()
    {
        if (_loading) return;

        await _form.Validate();
        if (!_form.IsValid) return;

        data.CourseId = _course!.Id;
        data.Disciplines = Disciplines
            .ConvertAll(d => new CreateCourseCurriculumDisciplineIn
            (
                d.Id,
                d.Period!.Value,
                d.Credits!.Value,
                d.Workload!.Value
            ));

        _loading = true;
        var response = await CreateCourseCurriculumClient.Create(data.Name, data.CourseId, data.Disciplines);
        if (response.IsSuccess)
        {
            MudDialog.Close(DialogResult.Ok(true));
            Snackbar.Add("Grade cadastrada com sucesso!", Severity.Success);
        }
        else
        {
            Snackbar.Add(response.Error.Message, Severity.Error);
        }
        _loading = false;
    }

    void Cancel() => MudDialog.Cancel();
}

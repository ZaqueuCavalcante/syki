@namespace Syki.Front.Features.Teacher.CreateClassActivity

<MudDialog Class="pb-2" DefaultFocus="DefaultFocus.None">
    <TitleContent>
        <SykiDialogTitle Text="Nova Atividade" />
    </TitleContent>
    <DialogContent>
        <MudForm @ref="@_form" Class="pt-1" Spacing="0">
            <MudGrid Spacing="2">
                <MudItem xs="12" sm="12" md="12" lg="12">
                    <SykiTextField Label="Título" AutoFocus @bind-Value="@_title" MaxLength="50" />
                </MudItem>
                <MudItem xs="12" sm="12" md="12" lg="12">
                    <SykiTextField Label="Descrição" @bind-Value="@_description" AutoGrow Lines="8" MaxLines="20" MaxLength="10000" />
                </MudItem>

                <MudItem xs="12" sm="4" md="4" lg="4">
                    <MudSelect
                        Dense
                        Margin="Margin.Dense"
                        Variant="Variant.Outlined"
                        T="ClassActivityType"
                        @bind-Value="@_type"
                        Label="Tipo"
                        Required
                        RequiredError="Informe!"
                        AdornmentColor="Color.Primary"
                    >
                        @foreach (ClassActivityType type in Enum.GetValues<ClassActivityType>())
                        {
                            <MudSelectItem Value="@type">@type.GetDescription()</MudSelectItem>
                        }
                    </MudSelect>
                </MudItem>

                <MudItem xs="12" sm="4" md="4" lg="4">
                    <MudSelect
                        Dense
                        Margin="Margin.Dense"
                        Variant="Variant.Outlined"
                        T="ClassNoteType"
                        Value="@_note"
                        ValueChanged="x => HandleNoteChanged(x)"
                        Label="Nota"
                        Required
                        RequiredError="Informe!"
                        AdornmentColor="Color.Primary"
                    >
                        @foreach (ClassNoteType type in Enum.GetValues<ClassNoteType>())
                        {
                            <MudSelectItem Value="@type">@type.GetDescription()</MudSelectItem>
                        }
                    </MudSelect>
                </MudItem>

                <MudItem xs="12" sm="4" md="4" lg="4">
                    <MudNumericField
                        T="int"
                        @bind-Value="@_weight"
                        Max="@_maxWeight"
                        MaxLength="@(GetWeightMaxWidth())"
                        Min="0"
                        HideSpinButtons
                        Variant="Variant.Outlined"
                        Margin="Margin.Dense"
                        HelperText="@($"Máx: {_maxWeight}")"
                        Required
                        Label="Peso (%)"
                        RequiredError="Informe!"
                    />
                </MudItem>

                <MudItem xs="12" sm="6" md="6" lg="6">
                    <SykiDatePicker Label="Data de entrega" @bind-Date="@_dueDate" Editable="false" />
                </MudItem>
                <MudItem xs="12" sm="6" md="6" lg="6">
                    <MudSelect
                        Dense
                        Margin="Margin.Dense"
                        Variant="Variant.Outlined"
                        T="Hour"
                        @bind-Value="@_dueHour"
                        Label="Hora de entrega"
                        Required
                        RequiredError="Informe!"
                        AdornmentColor="Color.Primary"
                    >
                        @foreach (Hour hour in Enum.GetValues<Hour>().Where(x => (int)x % 100 == 0))
                        {
                            <MudSelectItem Value="@hour">@hour.GetDescription()</MudSelectItem>
                        }
                    </MudSelect>
                </MudItem>
            </MudGrid>
        </MudForm>
    </DialogContent>
    <DialogActions>
        <DialogCancelButton OnClick="@Close" />
        <SykiProgressCircular Loading="@_loading" />
        <DialogSaveButton OnClick="@Submit" />
    </DialogActions>
</MudDialog>

@inject ISnackbar Snackbar
@inject CreateClassActivityClient Client
@inject IBrowserViewportService BrowserViewportService
@inject GetClassNotesRemainingWeightsClient GetClassNotesRemainingWeightsClient

@code
{
    [CascadingParameter]
    IMudDialogInstance MudDialog { get; set; }

    [Parameter]
    public Guid ClassId { get; set; }
    
    [Parameter]
    public EventCallback AfterSubmit { get; set; }

    private MudForm _form;
    private bool _loading;

    private List<ClassNoteRemainingWeightsOut> _remainingWeights = [];

    private ClassNoteType _note = ClassNoteType.N1;
    private string _title;
    private string _description;
    private ClassActivityType _type = ClassActivityType.Exam;
    private int _weight;
    private int _maxWeight;
    private DateTime? _dueDate = DateTime.UtcNow.AddDays(7);
    private Hour _dueHour = Hour.H12_00;

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();

        var breakpoint = await BrowserViewportService.GetCurrentBreakpointAsync();
        var options = MudDialog.Options with
        {
            FullWidth = true,
            CloseButton = true,
            BackdropClick = false,
            MaxWidth = MaxWidth.Medium,
            FullScreen = breakpoint == Breakpoint.Xs
        };
        await MudDialog.SetOptionsAsync(options);

        await Setup();
    }

    private async Task Setup()
    {
        Reset();
        var response = await GetClassNotesRemainingWeightsClient.Get(ClassId);
        if (response.IsSuccess)
        {
            _remainingWeights = response.Success;
        }
        _maxWeight = _remainingWeights.Where(x => x.Note == _note).Select(x => x.Weight).First();
    }

    private void Reset()
    {
        _note = ClassNoteType.N1;
        _title = string.Empty;
        _description = string.Empty;
        _type = ClassActivityType.Work;
        _weight = 0;
        _dueDate = DateTime.UtcNow.AddDays(7);
        _dueHour = Hour.H12_00;
    }

    private void Close()
    {
        Reset();
        MudDialog.Cancel();
    }

    private async Task Submit()
    {
        if (_loading) return;

        await _form.Validate();
        if (!_form.IsValid) return;

        _loading = true;

        var response = await Client.Create(ClassId, _note, _title, _description, _type, _weight, _dueDate!.Value.ToDateOnly(), _dueHour);
        if (response.IsSuccess)
        {
            await AfterSubmit.InvokeAsync();
            Close();
            Snackbar.Add("Atividade criada com sucesso!", Severity.Success);
        }
        else
        {
            Snackbar.Add(response.Error.Message, Severity.Error);
        }
        
        _loading = false;
    }

    private void HandleNoteChanged(ClassNoteType newValue)
    {
        _note = newValue;
        _maxWeight = _remainingWeights.Where(x => x.Note == _note).Select(x => x.Weight).First();
    }

    private int GetWeightMaxWidth()
    {
        if (_maxWeight == 100) return 3;
        if (_maxWeight > 9) return 2;
        if (_maxWeight > 0 && _maxWeight <= 9) return 1;

        return 0;
    }
}

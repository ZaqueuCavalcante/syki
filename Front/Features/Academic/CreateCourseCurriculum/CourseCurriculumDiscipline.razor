@namespace Syki.Front.Features.Academic.CreateCourseCurriculum

<MudForm Class="mx-0">
    <MudGrid Spacing="2">
        <MudItem xs="12" sm="12" md="6" lg="6">
            <MudStack Row Spacing="2">
                <MudItem xs="4">
                    <MudSelect
                        Dense
                        Margin="Margin.Dense"
                        Variant="Variant.Outlined"
                        T="byte?"
                        Value="@Data.Period"
                        ValueChanged="x => HandlePeriodoChanged(x)"
                        Label="Período"
                        Required
                        RequiredError="Informe!"
                        AdornmentColor="Color.Primary">
                        @foreach (byte? item in Enumerable.Range(1, 10).ToList())
                        {
                        <MudSelectItem Value="@item">@($"{item}º")</MudSelectItem>
                        }
                    </MudSelect>
                </MudItem>
                <MudItem xs="4">
                    <MudNumericField
                        MaxLength="2"
                        HideSpinButtons
                        Margin="Margin.Dense"
                        Variant="Variant.Outlined"
                        T="byte?"
                        Value="@Data.Credits"
                        ValueChanged="x => HandleCreditosChanged(x)"
                        Label="Créditos"
                        Required
                        RequiredError="Informe!"/>
                </MudItem>
                <MudItem xs="4">
                    <MudNumericField
                        MaxLength="3"
                        HideSpinButtons
                        Margin="Margin.Dense"
                        Variant="Variant.Outlined"
                        T="ushort?"
                        Value="@Data.Workload"
                        ValueChanged="x => HandleCargaHorariaChanged(x)"
                        Label="Carga"
                        Required
                        RequiredError="Informe!"/>
                </MudItem>

            </MudStack>
        </MudItem>

        <MudItem xs="12" sm="12" md="6" lg="6">
            <MudStack Row Spacing="2">
                <MudItem xs="11">
                    <MudAutocomplete
                        MaxItems="50"
                        T="CourseCurriculumDisciplineFillable"
                        SearchFunc="@SearchDiscipline"
                        Dense
                        Margin="Margin.Dense"
                        Variant="Variant.Outlined"
                        Class="mb-2"
                        Value="@Data"
                        ValueChanged="(CourseCurriculumDisciplineFillable newValue) => HandleDisciplineChanged(newValue)"
                        Label="Disciplina"
                        Required
                        RequiredError="Informe!"
                        AdornmentColor="Color.Primary"
                    />
                </MudItem>
                <MudItem>
                    <MudIconButton Icon="@Icons.Material.Filled.Delete" Size="Size.Medium" OnClick="@HandleDeleteClick"/>
                </MudItem>
            </MudStack>
        </MudItem>
    </MudGrid>
</MudForm>

@code
{
    [CascadingParameter(Name = "Options")]
    public List<CourseDisciplineOut> Options { get; set; }

    [Parameter]
    public EventCallback<Guid> OnDeleteClick { get; set; }

    [Parameter]
    public CourseCurriculumDisciplineFillable Data { get; set; }

    private async Task<IEnumerable<CourseCurriculumDisciplineFillable>> SearchDiscipline(string value, CancellationToken cancellationToken)
    {
        await Task.Delay(0);

        var filtered = Options.Where(d => !d.IsSelected || (d.IsSelected && d.Id == Data.Id))
            .ToList().ConvertAll(x => new CourseCurriculumDisciplineFillable { Id = x.Id, Name = x.Name });

        if (string.IsNullOrEmpty(value))
            return filtered;

        return filtered.Where(x => x.Name.Contains(value, StringComparison.InvariantCultureIgnoreCase));
    }

    private void HandleDisciplineChanged(CourseCurriculumDisciplineFillable newValue)
    {
        Options.First(d => d.Id == newValue.Id).IsSelected = true;

        if (Options.Any(x => x.Id == Data.Id))
        {
            Options.First(d => d.Id == Data.Id).IsSelected = false;
        }

        Data.Id = newValue.Id;
        Data.Name = newValue.Name;
    }

    private void HandlePeriodoChanged(byte? newValue)
    {
        Data.Period = newValue;
    }

    private void HandleCreditosChanged(byte? newValue)
    {
        Data.Credits = newValue;
    }

    private void HandleCargaHorariaChanged(ushort? newValue)
    {
        Data.Workload = newValue;
    }

    private async Task HandleDeleteClick()
    {
        await OnDeleteClick.InvokeAsync(Data.Id);
    }
}

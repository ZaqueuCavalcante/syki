@namespace Syki.Front.Features.Academic.CreateClass

<MudDialog Class="pb-2">
    <TitleContent>
        <SykiDialogTitle Text="Nova Turma" />
    </TitleContent>
    <DialogContent>
        <MudForm @ref="@_form" Class="pt-1" Spacing="0">
            <MudGrid Spacing="2">
                <MudItem xs="12" sm="12" md="12" lg="12">
                    <MudAutocomplete
                        T="DisciplineOut"
                        MaxItems="50"
                        SearchFunc="@SearchDiscipline"
                        Dense
                        Margin="Margin.Dense"
                        Variant="Variant.Outlined"
                        @bind-Value="@_discipline"
                        Label="Disciplina"
                        Required
                        RequiredError="Informe!"
                        AdornmentColor="Color.Primary"
                    />
                </MudItem>
                <MudItem xs="12" sm="12" md="12" lg="12">
                    <MudSelect
                        Dense
                        Margin="Margin.Dense"
                        Variant="Variant.Outlined"
                        @bind-Value="@_teacher"
                        Label="Professor"
                        Required
                        RequiredError="Informe!"
                        AdornmentColor="Color.Primary"
                    >
                        @foreach (TeacherOut? item in _teachers)
                        {
                            <MudSelectItem Value="@item">@item.Name</MudSelectItem>
                        }
                    </MudSelect>
                </MudItem>
                <MudItem xs="6" sm="6" md="6" lg="6">
                    <MudNumericField
                        MaxLength="2"
                        HideSpinButtons
                        Margin="Margin.Dense"
                        Variant="Variant.Outlined"
                        T="byte?"
                        @bind-Value="@_vacancies"
                        Label="Vagas"
                        Required
                        RequiredError="Informe!"
                    />
                </MudItem>
                <MudItem xs="6" sm="6" md="6" lg="6">
                    <MudSelect
                        Dense
                        Margin="Margin.Dense"
                        Variant="Variant.Outlined"
                        @bind-Value="@_period"
                        Label="Período"
                        Required
                        RequiredError="Informe!"
                        AdornmentColor="Color.Primary"
                    >
                        @foreach (string? item in _periods.ConvertAll(p => p.Id))
                        {
                            <MudSelectItem Value="@item">@item</MudSelectItem>
                        }
                    </MudSelect>
                </MudItem>

                <MudDivider Class="my-4"/>

                <MudGrid Spacing="0">
                    <MudItem xs="12" sm="12" md="12" lg="12">
                        @foreach (var schedule in _schedules)
                        {
                            <ClassSchedule Data="@schedule" OnDeleteClick="@DeleteSchedule" />
                            @if (_breakpoint == Breakpoint.Xs)
                            {
                                <MudDivider Class="my-2"/>
                            }
                        }
                    </MudItem>
                    <MudItem xs="12" sm="12" md="12" lg="12">
                        <MudButton
                            Disabled="(GetNewScheduleDisabled())"
                            StartIcon="@Icons.Material.Outlined.Add"
                            IconSize="Size.Large"
                            Variant="Variant.Outlined"
                            FullWidth
                            Class="mt-2 border-dashed border-2 mud-border-secundary ml-2"
                            Style="max-width: fit-content"
                            Color="Color.Primary"
                            @onclick="@NewSchedule"
                        >
                            NOVO HORÁRIO
                        </MudButton>
                    </MudItem>
                </MudGrid>
            </MudGrid>
        </MudForm>
    </DialogContent>
    <DialogActions>
        <DialogCancelButton OnClick="@Cancel" />
        <SykiProgressCircular Loading="@_loading" />
        <DialogSaveButton OnClick="@Submit" />
    </DialogActions>
</MudDialog>

@inject ISnackbar Snackbar
@inject NavigationManager Nav
@inject CreateClassClient CreateClassClient
@inject GetTeachersClient GetTeachersClient
@inject GetDisciplinesClient GetDisciplinesClient
@inject IBrowserViewportService BrowserViewportService
@inject GetAcademicPeriodsClient GetAcademicPeriodsClient

@code
{
    [CascadingParameter]
    IMudDialogInstance MudDialog { get; set; }
    
    private MudForm _form;
    private bool _loading;

    private DisciplineOut? _discipline;
    private TeacherOut? _teacher;
    private string? _period;
    private byte? _vacancies;
    private List<ScheduleInFillable> _schedules = [];

    private List<DisciplineOut> _disciplines = [];
    private List<TeacherOut> _teachers = [];
    private List<AcademicPeriodOut> _periods = [];
    
    private Breakpoint _breakpoint;

    protected override async Task OnInitializedAsync()
    {
        _breakpoint = await BrowserViewportService.GetCurrentBreakpointAsync();
        NewSchedule();
        _disciplines = await GetDisciplinesClient.Get();
        await Task.WhenAll([
            Task.Run(async () => _teachers = await GetTeachersClient.Get()),
            Task.Run(async () => _periods = await GetAcademicPeriodsClient.Get())
        ]);
    }

    private bool GetNewScheduleDisabled()
    {
        return _schedules.Count == 3;
    }

    private void NewSchedule()
    {
        _schedules.Add(new());
    }

    private void DeleteSchedule(Guid id)
    {
        _schedules.Remove(_schedules.First(f => f.Id == id));
    }

    private async Task<IEnumerable<DisciplineOut>> SearchDiscipline(string value, CancellationToken cancellationToken)
    {
        await Task.Delay(0);

        if (string.IsNullOrEmpty(value))
            return _disciplines;

        return _disciplines.Where(x => value.IsIn(x.Name));
    }

    private async Task Submit()
    {
        if (_loading) return;

        await _form.Validate();
        if (!_form.IsValid) return;

        var disciplineId = _discipline!.Id;
        var teacherId = _teacher!.Id;
        var period = _period!;
        var vacancies = _vacancies!.Value;
        var schedules = _schedules.ConvertAll(x => new ScheduleIn(x.Day!.Value, x.Start!.Value, x.End!.Value));

        _loading = true;
        var response = await CreateClassClient.Create(disciplineId, null, teacherId, period, vacancies, schedules);
        if (response.IsSuccess)
        {
            Snackbar.Add("Turma cadastrada com sucesso!", Severity.Success);
            Nav.NavigateTo($"/academic/classes/{response.Success.Id}");
        }
        else
        {
            Snackbar.Add(response.Error.Message, Severity.Error);
        }
        _loading = false;
    }

    private void Cancel() => MudDialog.Cancel();
}

@using Syki.Front.Features.Cross.ViewNotifications

@namespace Syki.Front.Features.Cross.GetUserNotifications

<div>
    @if (_alert)
    {
        <MudBadge Content="@(GetCount())" Color="Color.Error" Overlap BadgeClass="syki-badge-icon">
            <MudIconButton OnClick="@ViewAndOpenDialog" Icon="@Icons.Material.Filled.NotificationsActive" Style="color: #FFF" />
        </MudBadge>
    }
    else
    {
        <MudIconButton Icon="@Icons.Material.Filled.NotificationsNone" OnClick="@OpenDialog" Color="Color.Inherit" />
    }
</div>

@inject IDialogService DialogService
@inject IBrowserViewportService BrowserViewportService
@inject ViewNotificationsClient ViewNotificationsClient
@inject GetUserNotificationsClient GetUserNotificationsClient

@code
{
    private bool _alert = false;
    private List<UserNotificationOut> _notifications = [];

    protected override async Task OnInitializedAsync()
    {
        await GetNotifications();
        _alert = _notifications.Any(x => x.ViewedAt == null);
    }

    private string GetCount()
    {
        return _notifications.Count < 10 ? _notifications.Count.ToString() : "9+";
    }

    private async Task GetNotifications()
    {
        _notifications = await GetUserNotificationsClient.Get();
    }

    private async Task ViewAndOpenDialog()
    {
        _alert = false;
        await OpenDialog();
        await ViewNotificationsClient.View();
        await GetNotifications();
        StateHasChanged();
    }

    private async Task OpenDialog()
    {
        var breakpoint = await BrowserViewportService.GetCurrentBreakpointAsync();
        var options = new DialogOptions {
            MaxWidth = MaxWidth.Medium,
            FullWidth = true,
            FullScreen = breakpoint == Breakpoint.Xs,
        };
        var dialog = await DialogService.ShowAsync<ViewNotificationsDialog>("", options);

        var result = await dialog.Result;

        if (result!.Canceled) return;
        
        await GetNotifications();
    }
}

@using Syki.Front.Features.Teacher.CreateClassActivity

@namespace Syki.Front.Pages.Teacher

<MudContainer Class="mb-4 px-0">
    <MudCard>
        <MudCardContent Class="px-6">
            <SykiPageHeader Icon="@Icons.Material.Filled.EditNote" Title="Atividades" ButtonText="Nova Atividade" OnClick="@NewActivity" />
        </MudCardContent>
    </MudCard>

    <style>.mud-table-toolbar { height: auto }</style>
    <MudDataGrid
        T="TeacherClassActivityOut"
        Class="pa-4 mt-4"
        Items="@GetActivities()"
        QuickFilter="@_quickFilter"
        Hover="true"
        Dense="true"
        Loading="@_loading"
        SortMode="@SortMode.None"
        RowsPerPage="100"
    >
        <ToolBarContent>
            <MudGrid Class="align-center" Spacing="3">
                <MudItem xs="12" sm="3" md="3" lg="3">
                    <MudStack Row="true" AlignItems="AlignItems.Center" Spacing="3" Style="width: 100%;">
                        <MudToggleGroup T="ClassNoteType" SelectionMode="SelectionMode.MultiSelection" Values="@_notesFilter" ValuesChanged="@HandleNotesFilterChange" Style="width: 100%;" Color="Color.Tertiary" CheckMark>
                            <MudToggleItem Value="@(ClassNoteType.N1)" UnselectedIcon="@Icons.Material.Filled.CheckBoxOutlineBlank" SelectedIcon="@Icons.Material.Filled.CheckBox" />
                            <MudToggleItem Value="@(ClassNoteType.N2)" UnselectedIcon="@Icons.Material.Filled.CheckBoxOutlineBlank" SelectedIcon="@Icons.Material.Filled.CheckBox" />
                            <MudToggleItem Value="@(ClassNoteType.N3)" UnselectedIcon="@Icons.Material.Filled.CheckBoxOutlineBlank" SelectedIcon="@Icons.Material.Filled.CheckBox" />
                        </MudToggleGroup>
                    </MudStack>
                </MudItem>
                <MudItem xs="12" sm="9" md="9" lg="9" Class="d-flex justify-end">
                    <SykiDataGridSearchTextField @bind-Value="@_searchString" Placeholder="Busque por título" />
                </MudItem>
            </MudGrid>
        </ToolBarContent>
        <Columns>
            <PropertyColumn Property="x => x.Title" Title="Título" />
            <PropertyColumn Property="x => x.Type.GetDescription()" Title="Tipo" />
            <PropertyColumn Property="x => x.Note.GetDescription()" Title="Nota" />
            <PropertyColumn Property="x => x.Weight" Title="Peso (%)" />
            <PropertyColumn Property="x => x.CreatedAt.ToLocalTime().Format()" Title="Criada em" />
            <PropertyColumn Property="x => x.GetDueDate()" Title="Data de entrega" />
            <TemplateColumn Title="Entregas">
                <CellTemplate>
                    <MudProgressLinear Color="@GetDeliveryRateColor(context.Item.GetDeliveryRate())" Rounded="true" Size="Size.Large" Value="@decimal.ToDouble(context.Item.GetDeliveryRate())" Style="height: 24px">
                        <MudText Typo="Typo.body1">
                            <b>@GetDeliveryRateFraction(context.Item)</b>
                        </MudText>
                    </MudProgressLinear>
                </CellTemplate>
            </TemplateColumn>
            <TemplateColumn>
                <CellTemplate>
                    <MudIconButton Size="@Size.Small" Icon="@Icons.Material.Filled.RemoveRedEye" OnClick="@(() => GoToDetails(context.Item.Id))" />
                </CellTemplate>
            </TemplateColumn>
        </Columns>
        <NoRecordsContent>
            @(GetNotFoundMessage())
        </NoRecordsContent>
        <PagerContent>
        </PagerContent>
    </MudDataGrid>
</MudContainer>

@inject NavigationManager Nav
@inject IDialogService DialogService
@inject GetTeacherClassActivitiesClient GetTeacherClassActivitiesClient

@code
{
	[Parameter]
	public Guid ClassId { get; set; }

    private bool _loading;
    private string _searchString;
    private List<TeacherClassActivityOut> _activities = [];
    private IEnumerable<ClassNoteType> _notesFilter = [ClassNoteType.N1, ClassNoteType.N2, ClassNoteType.N3];

    protected override async Task OnParametersSetAsync()
    {
        await Load();
    }

    private async Task Load()
    {
        _loading = true;
        _searchString = string.Empty;
        _notesFilter = [ClassNoteType.N1, ClassNoteType.N2, ClassNoteType.N3];
        var response = await GetTeacherClassActivitiesClient.Get(ClassId);
        if (response.IsSuccess)
        {
            _activities = response.Success;
        }
        _loading = false;
    }

    private void HandleNotesFilterChange(IEnumerable<ClassNoteType> newValues)
    {
        if (!newValues.Any())
        {
            _notesFilter = _notesFilter.ToList();
            return;
        }

        _notesFilter = newValues;
    }

    private List<TeacherClassActivityOut> GetActivities()
    {
        return _activities.Where(x => _notesFilter.Contains(x.Note)).ToList();
    }

    private void GoToDetails(Guid activityId)
    {
        Nav.NavigateTo($"/teacher/classes/{ClassId}/activities/{activityId}");
    }

    private Task NewActivity()
    {
        var parameters = new DialogParameters<CreateClassActivityDialog>
        {
            { x => x.ClassId, ClassId },
            { x => x.AfterSubmit, EventCallback.Factory.Create(this, Load) }
        };

        return DialogService.ShowAsync<CreateClassActivityDialog>("", parameters);
    }

    private string GetDeliveryRateFraction(TeacherClassActivityOut activity)
    {
        return $"{activity.DeliveredWorks} / {activity.TotalWorks}";
    }

    private Color GetDeliveryRateColor(decimal deliveryRate)
    {
        if (deliveryRate == 100M) return Color.Success;

        return deliveryRate >= 70 ? Color.Warning : Color.Error;
    }

    private Func<TeacherClassActivityOut, bool> _quickFilter => x => _searchString.IsIn(x.Title, x.Description);
    private string GetNotFoundMessage()
    {
        return _searchString.IsEmpty() && _notesFilter.Count() == 3  ? "Não existem atividades ainda." : "Nenhuma atividade encontrada.";
    }
}

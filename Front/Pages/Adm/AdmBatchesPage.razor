@using Syki.Front.Components.Summaries
@using Syki.Front.Features.Adm.GetCommands
@using Syki.Front.Features.Adm.GetCommandsSummary

@namespace Syki.Front.Pages.Adm

@page "/adm/batches"
@attribute [Authorize(Roles = "Adm")]

<SykiPageTitle Title="Lotes" />

<MudContainer Class="my-4 px-4">
    <MudCard>
        <MudCardContent>
            <MudGrid>
                <MudItem xs="12" sm="8" md="8" lg="8">
                    <MudStack Row AlignItems="AlignItems.Center">
                        <MudIcon Icon="@Icons.Material.Filled.BorderOuter" Class="mb-1" Size="Size.Large"/>
                        <MudText Typo="Typo.h5" Style="font-weight: bold">Lotes</MudText>
                    </MudStack>
                </MudItem>
                <MudItem xs="12" sm="4" md="4" lg="4" Class="d-flex justify-end">
                    <MudText Typo="Typo.h4" Style="font-weight: bold">@_data.Summary.Total.ToThousandSeparated()</MudText>
                </MudItem>
            </MudGrid>
        </MudCardContent>
    </MudCard>

    <MudContainer Class="px-0 my-4">
        <MudGrid Spacing="2">
            <SummaryCard Loading="@_loading" Icon="@Icons.Material.Rounded.WarningAmber" Color="MudBlazor.Color.Warning" Text="Pendentes" Value="@_data.Summary.Pending" />
            <SummaryCard Loading="@_loading" Icon="@Icons.Material.Filled.Autorenew" Color="MudBlazor.Color.Info" Text="Processando" Value="@_data.Summary.Processing" />
            <SummaryCard Loading="@_loading" Icon="@Icons.Material.Filled.ErrorOutline" Color="MudBlazor.Color.Error" Text="Erros" Value="@_data.Summary.Error" />
            <SummaryCard Loading="@_loading" Icon="@Icons.Material.Filled.CheckCircleOutline" Color="MudBlazor.Color.Success" Text="Sucessos" Value="@_data.Summary.Success" />
        </MudGrid>
    </MudContainer>

    <style>
        .mud-table-toolbar {
            height: auto;
        }
    </style>
    <MudContainer Class="px-0 my-4">
        <MudTable
            Class="mb-4"
            Dense
            Hover
            Items="@_batches"
            RowsPerPage="10"
            T="CommandBatchTableOut"
            Loading="@_tableLoading"
            Breakpoint="Breakpoint.Sm"
        >
            <ToolBarContent>
                <MudCard Class="my-4 mr-2" Style="width: 100%" Elevation="0" Outlined>
                    <MudCardContent>
                        <MudGrid Spacing="3">
                            <MudItem xs="12" sm="3" md="3" lg="3">
                                <MudSelect
                                    Dense
                                    Margin="Margin.Dense"
                                    Variant="Variant.Outlined"
                                    @bind-Value="@_status"
                                    Label="Status"
                                    Clearable
                                    AdornmentColor="Color.Primary
                                ">
                                    @foreach (CommandBatchStatus? item in Enum.GetValues<CommandBatchStatus>())
                                    {
                                        <MudSelectItem Value="@item">
                                            <MudStack Row AlignItems="AlignItems.Center">
                                                <MudIcon Class="mb-1" Icon="@item.Value.GetIcon()" Color="@item.Value.GetColor()" Size="Size.Small"/>
                                                <MudText>@item.GetDescription()</MudText>
                                            </MudStack>
                                        </MudSelectItem>
                                    }
                                </MudSelect>
                            </MudItem>
                            <MudItem xs="12" sm="4" md="4" lg="4">
                                <MudSelect
                                    Dense
                                    Margin="Margin.Dense"
                                    Variant="Variant.Outlined"
                                    @bind-Value="@_type"
                                    Label="Tipo"
                                    Clearable
                                    AdornmentColor="Color.Primary
                                ">
                                    @foreach (CommandBatchType? item in _data.Types.Select(x => x.Type))
                                    {
                                        <MudSelectItem Value="@item">@item.GetDescription()</MudSelectItem>
                                    }
                                </MudSelect>
                            </MudItem>
                            <MudItem xs="12" sm="5" md="5" lg="5">
                                <MudAutocomplete
                                    T="TinyInstitutionOut"
                                    MaxItems="50"
                                    SearchFunc="@SearchInstitution"
                                    Dense
                                    Margin="Margin.Dense"
                                    Variant="Variant.Outlined"
                                    @bind-Value="@_institution"
                                    Label="Instituição"
                                    Clearable
                                    OnClearButtonClick="@(() => _institution = null)"
                                    AdornmentColor="Color.Primary"
                                />
                            </MudItem>
                            <MudItem xs="12" sm="12" md="12" lg="12" Class="d-flex justify-end align-center pt-1">
                                <MudStack Row AlignItems="AlignItems.Center" Spacing="1">
                                    <MudChip T="string" Variant="Variant.Text" Color="Color.Primary" Class="mt-1 pt-1">@_batches.Count.ToThousandSeparated()</MudChip>
                                    <MudButton
                                        OnClick="@Filter"
                                        Size="Size.Medium"
                                        Color="Color.Primary"
                                        IconSize="Size.Medium"
                                        Variant="Variant.Filled"
                                        StartIcon="@Icons.Material.Outlined.FilterList"
                                    >
                                        Filtrar
                                    </MudButton>
                                </MudStack>
                            </MudItem>
                        </MudGrid>
                    </MudCardContent>
                </MudCard>
            </ToolBarContent>

            <HeaderContent>
                <MudTh>Tipo</MudTh>
                <MudTh>Criação</MudTh>
                <MudTh>Processamento</MudTh>
                <MudTh>Comandos</MudTh>
                <MudTh></MudTh>
            </HeaderContent>
            <RowTemplate>
                <MudTd DataLabel="Tipo">
                    <MudStack Row AlignItems="AlignItems.Center" Spacing="1">
                        <MudIcon Icon="@context.Status.GetIcon()" Color="@context.Status.GetColor()" Size="Size.Small" />
                        <MudText Typo="Typo.body2">@context.Type.GetDescription()</MudText>
                    </MudStack>
                </MudTd>
                <MudTd DataLabel="Criação">@context.CreatedAt.ToMinuteString()</MudTd>
                <MudTd DataLabel="Processamento">@context.ProcessedAt.ToMinuteString()</MudTd>
                <MudTd DataLabel="Comandos">@context.Size.ToThousandSeparated()</MudTd>
                <MudTd>
                    <MudIconButton Size="@Size.Small" Icon="@Icons.Material.Filled.RemoveRedEye" OnClick="@(() => GoToDetails(context.Id))" />
                </MudTd>
            </RowTemplate>
            <NoRecordsContent>
                @(GetNotFoundMessage())
            </NoRecordsContent>
            <PagerContent>
                <SykiTablePager />
            </PagerContent>
        </MudTable>
    </MudContainer>
</MudContainer>

@inject NavigationManager Nav
@inject GetBatchesClient GetBatchesClient
@inject GetBatchesSummaryClient GetBatchesSummaryClient

@code
{
    private bool _loading;
    private bool _tableLoading;
    private GetBatchesSummaryOut _data = new();
    private List<CommandBatchTableOut> _batches = [];

    private TinyInstitutionOut? _institution;
    private CommandBatchType? _type;
    private CommandBatchStatus? _status;

    protected override async Task OnInitializedAsync()
    {
        _loading = true;
        _tableLoading = true;
        _data = await GetBatchesSummaryClient.Get();
        await Filter();
        _loading = false;
    }

    private async Task Filter()
    {
        _tableLoading = true;
        var filters = new CommandBatchTableFilterIn()
        {
            Type = _type,
            Status = _status,
            InstitutionId = _institution?.Id,
        };
        _batches = await GetBatchesClient.Get(filters);
        _tableLoading = false;
    }

    private async Task<IEnumerable<TinyInstitutionOut>> SearchInstitution(string value, CancellationToken cancellationToken)
    {
        await Task.Delay(0);

        if (string.IsNullOrEmpty(value))
            return _data.Institutions;

        return _data.Institutions.Where(x => value.IsIn(x.Name));
    }

    private void GoToDetails(Guid id)
    {
        Nav.NavigateTo($"adm/batches/{id}");
    }

    private string GetNotFoundMessage()
    {
        return _tableLoading ? "" : "Não existem lotes ainda.";
    }
}

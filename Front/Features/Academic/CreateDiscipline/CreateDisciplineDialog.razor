@using Syki.Front.Features.Academic.GetCourses

@namespace Syki.Front.Features.Academic.CreateDiscipline

<MudDialog Class="pb-2" DefaultFocus="DefaultFocus.None">
    <TitleContent>
        <SykiDialogTitle Text="Nova Disciplina" />
    </TitleContent>
    <DialogContent>
        <MudForm @ref="@_form" Class="pt-1">
            <SykiTextField Label="Nome" AutoFocus @bind-Value="@_name" />
            <MudSelect
                Dense
                Margin="Margin.Dense"
                Variant="Variant.Outlined"
                Class="mb-2"
                T="CreateCourseOut"
                Label="Cursos"
                MultiSelection
                Required
                RequiredError="Informe!"
                @bind-SelectedValues="@SelectedCourses"
                MultiSelectionTextFunc="@(new Func<List<string>, string>(GetMultiSelectionText))"
            >
                @foreach (var course in _courses)
                {
                    <MudSelectItem Class="d-flex align-start gap-0" T="CreateCourseOut" Value="@course">@course.Name</MudSelectItem>
                }
            </MudSelect>
        </MudForm>
    </DialogContent>
    <DialogActions>
        <DialogCancelButton OnClick="@Cancel" />
        <SykiProgressCircular Loading="@_loading" />
        <DialogSaveButton OnClick="@Submit" />
    </DialogActions>
</MudDialog>

@inject ISnackbar Snackbar
@inject GetCoursesClient GetCoursesClient
@inject CreateDisciplineClient CreateDisciplineClient

@code
{
    [CascadingParameter]
    IMudDialogInstance MudDialog { get; set; }

    MudForm _form;
    private bool _loading;
    private string _name;

    private List<CreateCourseOut> _courses = [];
    IEnumerable<CreateCourseOut> SelectedCourses { get; set; } = new HashSet<CreateCourseOut>();

    protected override async Task OnInitializedAsync()
    {
        _courses = await GetCoursesClient.Get();
    }

    private string GetMultiSelectionText(List<string> selected)
    {
        if (selected.Count == 1)
            return selected.First();

        if (selected.Count > 1)
            return $"{selected.Count} cursos selecionados";

        return "";
    }

    private async Task Submit()
    {
        if (_loading) return;

        await _form.Validate();
        if (!_form.IsValid) return;

        _loading = true;
        var response = await CreateDisciplineClient.Create(_name, SelectedCourses.ToList().ConvertAll(c => c.Id));
        if (response.IsSuccessStatusCode)
        {
            MudDialog.Close(DialogResult.Ok(true));
            Snackbar.Add("Disciplina cadastrada com sucesso!", Severity.Success);
        }
        else
        {
            var error = await response.ToError();
            Snackbar.Add(error.Message, Severity.Error);
        }
        _loading = false;
    }

    void Cancel() => MudDialog.Cancel();
}

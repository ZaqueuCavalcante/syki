@namespace Syki.Front.Pages.Student

<MudContainer Class="my-4 px-0">
    <style>.mud-table-toolbar { height: auto }</style>
    <MudDataGrid
        T="StudentClassActivityOut"
        Class="pa-4 mt-4"
        Items="@GetActivities()"
        Hover
        Dense
        Loading="@_loading"
        SortMode="@SortMode.None"
        RowsPerPage="100"
    >
        <ToolBarContent>
            <MudGrid Class="align-center mb-1" Spacing="3">
                <MudItem xs="12" sm="3" md="3" lg="3">
                    <MudStack Row AlignItems="AlignItems.Center" Spacing="3" Style="width: 100%;">
                        <MudToggleGroup T="ClassNoteType" SelectionMode="SelectionMode.MultiSelection" Values="@_notesFilter" ValuesChanged="@HandleNotesFilterChange" Style="width: 100%;" Color="Color.Tertiary" CheckMark>
                            <MudToggleItem Value="@(ClassNoteType.N1)" UnselectedIcon="@Icons.Material.Filled.CheckBoxOutlineBlank" SelectedIcon="@Icons.Material.Filled.CheckBox" />
                            <MudToggleItem Value="@(ClassNoteType.N2)" UnselectedIcon="@Icons.Material.Filled.CheckBoxOutlineBlank" SelectedIcon="@Icons.Material.Filled.CheckBox" />
                            <MudToggleItem Value="@(ClassNoteType.N3)" UnselectedIcon="@Icons.Material.Filled.CheckBoxOutlineBlank" SelectedIcon="@Icons.Material.Filled.CheckBox" />
                        </MudToggleGroup>
                    </MudStack>
                </MudItem>
                <MudItem xs="12" sm="9" md="9" lg="9" Class="d-flex justify-end">
                    <MudStack Row>
                        @if (_notesFilter.Contains(ClassNoteType.N1))
                        {
                            <MudChip T="string" Class="px-3 ma-0" Size="Size.Medium" Label="true">
                                <b>N1: @_class.N1.Format()</b>
                            </MudChip>
                        }
                        @if (_notesFilter.Contains(ClassNoteType.N2))
                        {
                            <MudChip T="string" Class="px-3 ma-0" Size="Size.Medium" Label="true">
                                <b>N2: @_class.N2.Format()</b>
                            </MudChip>
                        }
                        @if (_notesFilter.Contains(ClassNoteType.N3))
                        {
                            <MudChip T="string" Class="px-3 ma-0" Size="Size.Medium" Label="true">
                                <b>N3: @_class.N3.Format()</b>
                            </MudChip>
                        }
                    </MudStack>
                </MudItem>
            </MudGrid>
        </ToolBarContent>
        <Columns>
            <PropertyColumn Property="x => x.Title" Title="Título" />
            <PropertyColumn Property="x => x.Type.GetDescription()" Title="Tipo" />
            <PropertyColumn Property="x => x.Value.Format()" Title="Pontuação" />
            <PropertyColumn Property="x => x.GetWeight()" Title="Peso" />
            <PropertyColumn Property="x => x.GetNote()" Title="Nota" />
            <PropertyColumn Property="x => x.GetDueDate()" Title="Data de entrega" />
            <TemplateColumn Title="Status">
                <CellTemplate>
                    <MudChip T="string" Label="true" Class="px-4 ma-0" Size="Size.Small" Color="@context.Item.GetColor()">
                        <b>@context.Item.WorkStatus.GetDescription()</b>
                    </MudChip>
                </CellTemplate>
            </TemplateColumn>
            <TemplateColumn>
                <CellTemplate>
                    <MudIconButton Size="@Size.Small" Icon="@Icons.Material.Filled.RemoveRedEye" OnClick="@(() => GoToDetails(context.Item))" />
                </CellTemplate>
            </TemplateColumn>
        </Columns>
        <NoRecordsContent>
            @(GetNotFoundMessage())
        </NoRecordsContent>
        <PagerContent>
        </PagerContent>
    </MudDataGrid>
</MudContainer>

<MudContainer Class="my-4 px-0">
    <MudPaper Class="px-4 pt-4">
        <ApexCharts.ApexChart @ref="@_chart" TItem="StudentClassActivityOut" Options="@_options" Height="@_height">
            <ApexCharts.ApexPointSeries
                Name="Pontuação"
                TItem="StudentClassActivityOut"
                Items="@GetActivities()"
                SeriesType="ApexCharts.SeriesType.Bar"
                XValue="@(a => a.Title)"
                YValue="@(e => e.Value)"
                ShowDataLabels/>
            <ApexCharts.ApexPointSeries
                Name="Pontuação ponderada"
                TItem="StudentClassActivityOut"
                Items="@GetActivities()"
                SeriesType="ApexCharts.SeriesType.Bar"
                XValue="@(a => a.PonderedValueMessage())"
                YValue="@(e => e.PonderedValue)"
                ShowDataLabels/>
        </ApexCharts.ApexChart>
    </MudPaper>
</MudContainer>

@inject NavigationManager Nav
@inject GetStudentClassClient GetStudentClassClient
@inject GetStudentClassActivitiesClient GetStudentClassActivitiesClient

@code
{
	[Parameter]
	public Guid ClassId { get; set; }

    private int _height;
    private bool _loading;
    private StudentClassOut _class = new();

    private List<StudentClassActivityOut> _activities = [];
    private IEnumerable<ClassNoteType> _notesFilter = [ClassNoteType.N1, ClassNoteType.N2, ClassNoteType.N3];

    private ApexCharts.ApexChart<StudentClassActivityOut> _chart;
    private ApexCharts.ApexChartOptions<StudentClassActivityOut> _options = new()
    {
        Chart = new ApexCharts.Chart
        {
            Toolbar = new ApexCharts.Toolbar { Show = false },
        },
        PlotOptions = new ApexCharts.PlotOptions
        {
            Bar = new ApexCharts.PlotOptionsBar { Horizontal = true }
        },
        Yaxis = [ new ApexCharts.YAxis { Max = 10 } ]
    };

    protected override async Task OnParametersSetAsync()
    {
        _loading = true;
        _class = await GetStudentClassClient.Get(ClassId);
        var response = await GetStudentClassActivitiesClient.Get(ClassId);
        if (response.IsSuccess)
        {
            _activities = response.Success;
        }
        await RenderChart();
        _loading = false;
    }

    private async Task RenderChart()
    {
        _height = 100 + GetActivities().Count() * 60;
        StateHasChanged();
        await _chart.RenderAsync();
    }

    private IEnumerable<StudentClassActivityOut> GetActivities()
    {
        return _activities.Where(x => _notesFilter.Contains(x.Note)).ToList();
    }

    private void GoToDetails(StudentClassActivityOut activity)
    {
        Nav.NavigateTo($"student/classes/{activity.ClassId}/activities/{activity.Id}");
    }

    private async Task HandleNotesFilterChange(IEnumerable<ClassNoteType> newValues)
    {
        if (!newValues.Any())
        {
            _notesFilter = _notesFilter.ToList();
            return;
        }

        _notesFilter = newValues;
        await RenderChart();
    }

    private string GetNotFoundMessage()
    {
        return _notesFilter.Count() == 3  ? "Não existem atividades ainda." : "Nenhuma atividade encontrada.";
    }
}

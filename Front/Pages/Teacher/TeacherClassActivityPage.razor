@namespace Syki.Front.Pages.Teacher

@page "/teacher/classes/{classId:guid}/activities/{activityId:guid}"
@attribute [Authorize(Roles = "Teacher")]

<SykiPageTitle Title="Atividade" />

<MudContainer Class="mb-4 px-4">
    <MudBreadcrumbs Items="@_breadcrumbs" Class="px-0" />
    <MudGrid Class="align-center">
        <MudItem xs="12" sm="8" md="8" lg="8">
            <MudStack Row="true" AlignItems="AlignItems.Center">
                <MudIcon Icon="@Icons.Material.Filled.EditNote" Class="mb-1" Size="Size.Large"/>
                <MudText Typo="Typo.h5" Class="mt-1" Style="font-weight: bold">Atividade</MudText>
            </MudStack>
        </MudItem>
        <MudItem xs="12" sm="4" md="4" lg="4" Class="d-flex justify-end">
            <MudProgressLinear Color="@GetDeliveryRateColor(_activity.GetDeliveryRate())" Rounded="true" Size="Size.Large" Value="@decimal.ToDouble(_activity.GetDeliveryRate())" Style="height: 28px">
                <MudText Typo="Typo.body1">
                    <b>@GetDeliveryRateFraction(_activity)</b>
                </MudText>
            </MudProgressLinear>
        </MudItem>
    </MudGrid>
    
    <MudExpansionPanels Class="my-4">
        <MudExpansionPanel Expanded="@_expanded">
            <TitleContent>
                <MudText Typo="Typo.h6">@_activity.Title</MudText>
            </TitleContent>
            <ChildContent>
                <MudContainer Class="px-0">
                    <MudGrid Spacing="3">
                        <MudItem xs="3" sm="2" md="2" lg="2">
                            <SykiLabelText Label="Nota" Text="@_activity.Note.ToString()"/>
                        </MudItem>
                        <MudItem xs="5" sm="2" md="2" lg="2">
                            <SykiLabelText Label="Tipo" Text="@_activity.Type.GetDescription()"/>
                        </MudItem>
                        <MudItem xs="4" sm="2" md="2" lg="2">
                            <SykiLabelText Label="Peso (%)" Text="@_activity.Weight.ToString()"/>
                        </MudItem>
                        <MudItem xs="6" sm="3" md="3" lg="3">
                            <SykiLabelText Label="Criada em" Text="@_activity.CreatedAt.ToLocalTime().Format()"/>
                        </MudItem>
                        <MudItem xs="6" sm="3" md="3" lg="3">
                            <SykiLabelText Label="Data de entrega" Text="@_activity.GetDueDate()"/>
                        </MudItem>
                    </MudGrid>
                    <MudText Class="mt-4" Style="white-space: pre-line;">
                        @_activity.Description
                    </MudText>
                </MudContainer>
            </ChildContent>
        </MudExpansionPanel>
    </MudExpansionPanels>

    <MudContainer Class="px-0 mb-4">
        <style>.mud-table-toolbar { height: auto }</style>
        <MudDataGrid Class="pa-4" Items="@GetWorks()" QuickFilter="@_quickFilter" Hover="true" SortMode="@SortMode.None" Loading="@_loading" Dense="true" RowsPerPage="100">
            <ToolBarContent>
                <MudGrid Class="align-center" Spacing="3">
                    <MudItem xs="12" sm="5" md="5" lg="5">
                        <MudStack Row="true" AlignItems="AlignItems.Center" Spacing="3" Style="width: 100%;">
                            <MudToggleGroup T="ClassActivityWorkStatus" SelectionMode="SelectionMode.MultiSelection" Values="@_statusFilter" ValuesChanged="@HandleStatusFilterChange" Style="width: 100%;" Color="Color.Tertiary" CheckMark="@(_breakpoint != Breakpoint.Xs)">
                                <MudToggleItem Value="@(ClassActivityWorkStatus.Pending)" Text="@ClassActivityWorkStatus.Pending.GetDescription()" UnselectedIcon="@Icons.Material.Filled.CheckBoxOutlineBlank" SelectedIcon="@Icons.Material.Filled.CheckBox" />
                                <MudToggleItem Value="@(ClassActivityWorkStatus.Delivered)" Text="@ClassActivityWorkStatus.Delivered.GetDescription()" UnselectedIcon="@Icons.Material.Filled.CheckBoxOutlineBlank" SelectedIcon="@Icons.Material.Filled.CheckBox" />
                                <MudToggleItem Value="@(ClassActivityWorkStatus.Finalized)" Text="@ClassActivityWorkStatus.Finalized.GetDescription()" UnselectedIcon="@Icons.Material.Filled.CheckBoxOutlineBlank" SelectedIcon="@Icons.Material.Filled.CheckBox" />
                            </MudToggleGroup>
                        </MudStack>
                    </MudItem>
                    <MudItem xs="12" sm="7" md="7" lg="7" Class="d-flex justify-end">
                        <SykiDataGridSearchTextField @bind-Value="@_searchString" Placeholder="Busque por nome" />
                    </MudItem>
                </MudGrid>
            </ToolBarContent>
            <Columns>
                <PropertyColumn Property="x => x.StudentName" Title="Aluno" />
                <PropertyColumn Property="x => x.Status.GetDescription()" Title="Status" />
                <PropertyColumn Property="x => x.Note.Format()" Title="Nota" />
                <PropertyColumn Property="x => x.GetLink()" Title="Link" />
                <TemplateColumn>
                    <CellTemplate>
                        <MudIconButton Size="@Size.Small" Icon="@Icons.Material.Filled.BookmarkAdded" OnClick="@(() => OpenDialog(context.Item))" />
                    </CellTemplate>
                </TemplateColumn>
            </Columns>
            <NoRecordsContent>
                @(GetNotFoundMessage())
            </NoRecordsContent>
        </MudDataGrid>
    </MudContainer>
</MudContainer>

@inject IDialogService DialogService
@inject ILocalStorageService LocalStorage
@inject IBrowserViewportService BrowserViewportService
@inject GetTeacherClassActivityClient GetTeacherClassActivityClient

@code
{
	[Parameter]
	public Guid ClassId { get; set; }

	[Parameter]
	public Guid ActivityId { get; set; }

    private bool _loading;
    private string _searchString;
    private bool _expanded = true;
    private List<CascadingClassDto> _classes = [];
    private List<BreadcrumbItem> _breadcrumbs = [];
    private TeacherClassActivityOut _activity = new();

    private Breakpoint _breakpoint;
    private IEnumerable<ClassActivityWorkStatus> _statusFilter = [ClassActivityWorkStatus.Pending, ClassActivityWorkStatus.Delivered, ClassActivityWorkStatus.Finalized];

    protected override async Task OnInitializedAsync()
    {
        _breakpoint = await BrowserViewportService.GetCurrentBreakpointAsync();

        _classes = JsonConvert.DeserializeObject<List<CascadingClassDto>>(await LocalStorage.GetItemAsync<string>("Classes") ?? "[]") ?? [];
        var @class = _classes.FirstOrDefault(x => x.Id == ClassId);
        if (@class != null)
        {
            _breadcrumbs.Add(new("Turmas", href: "/", icon: Icons.Material.Filled.CenterFocusStrong));
            _breadcrumbs.Add(new(@class.Name, href: $"/teacher/classes/{@class.Id}"));
            _breadcrumbs.Add(new("Atividade", href: $"/teacher/classes/{@class.Id}/activities/{ActivityId}"));
        }

        await Load();
    }

    private async Task Load()
    {
        _loading = true;
        var response = await GetTeacherClassActivityClient.Get(ClassId, ActivityId);
        if (response.IsSuccess)
        {
            _activity = response.Success;
        }
        _statusFilter = [ClassActivityWorkStatus.Pending, ClassActivityWorkStatus.Delivered, ClassActivityWorkStatus.Finalized];
        _loading = false;
    }
    
    private void HandleStatusFilterChange(IEnumerable<ClassActivityWorkStatus> newValues)
    {
        if (!newValues.Any())
        {
            _statusFilter = _statusFilter.ToList();
            return;
        }

        _statusFilter = newValues;
    }

    private List<ClassActivityWorkOut> GetWorks()
    {
        return _activity.Works.Where(x => _statusFilter.Contains(x.Status)).ToList();
    }

    private async Task OpenDialog(ClassActivityWorkOut work)
    {
        var parameters = new DialogParameters<AddStudentClassActivityNoteDialog>();
        parameters.Add(x => x.Work, work);
        parameters.Add(x => x.ActivityId, ActivityId);

        _breakpoint = await BrowserViewportService.GetCurrentBreakpointAsync();
        var options = new DialogOptions {
            FullWidth = true,
            MaxWidth = MaxWidth.Small,
            FullScreen = _breakpoint == Breakpoint.Xs,
        };
        var dialog = await DialogService.ShowAsync<AddStudentClassActivityNoteDialog>("", parameters, options);

        var result = await dialog.Result;

        if (result!.Canceled) return;
        
        await Load();
    }
    
    private static string GetDeliveryRateFraction(TeacherClassActivityOut activity)
    {
        return $"{activity.DeliveredWorks} / {activity.TotalWorks} entregas";
    }

    private static Color GetDeliveryRateColor(decimal deliveryRate)
    {
        if (deliveryRate == 100M) return Color.Success;

        return deliveryRate >= 70 ? Color.Warning : Color.Error;
    }

    private Func<ClassActivityWorkOut, bool> _quickFilter => x => _searchString.IsIn(x.StudentName);

    private string GetNotFoundMessage()
    {
        return _searchString.IsEmpty() && _statusFilter.Count() == 3 ? "Não existem alunos cadastrados ainda." : "Nenhum aluno encontrado.";
    }
}

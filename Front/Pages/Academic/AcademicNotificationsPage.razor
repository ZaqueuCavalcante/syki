@using Syki.Front.Features.Academic.CreateNotification

@namespace Syki.Front.Pages.Academic

@page "/academic/notifications"
@attribute [Authorize(Roles = "Academic")]

<SykiPageTitle Title="Notificações" />

<MudContainer Class="my-4 px-4">
    <SykiPageHeader Icon="@Icons.Material.Filled.Notifications" Title="Notificações" ButtonText="Nova Notificação" OnClick="@OpenDialog" />
    <SykiPageAlert Text="Aqui você pode escolher quais usuários serão notificados e acompanhar o status de visualização das mensagens." />
    <MudContainer Class="px-0 mb-4">
        <MudDataGrid
            T="NotificationOut"
            Class="pa-4"
            Items="@_notifications"
            QuickFilter="@_quickFilter"
            Dense
            Hover
            ReadOnly
            Loading="@_loading"
            RowsPerPage="10"
            FooterClass="d-flex"
        >
            <ToolBarContent>
                <SykiDataGridSearchTextField @bind-Value="@_searchString" Placeholder="Busque por título ou descrição" />
            </ToolBarContent>
            <Columns>
                <PropertyColumn Property="x => x.Title" Title="Título" />
                <PropertyColumn Property="x => x.Description" Title="Descrição" />
                <PropertyColumn Property="x => x.CreatedAt.ToLocalTime().Format()" Title="Criada em" />
                <PropertyColumn Property="x => x.Target.GetDescription()" Title="Audiência" />
                <PropertyColumn Property="x => x.Views" Title="Visualizações" />
            </Columns>
            <NoRecordsContent>
                @(GetNotFoundMessage())
            </NoRecordsContent>
            <PagerContent>
                <SykiDataGridPager T="NotificationOut"/>
            </PagerContent>
        </MudDataGrid>
    </MudContainer>
</MudContainer>

@inject IDialogService DialogService
@inject GetNotificationsClient GetNotificationsClient
@inject IBrowserViewportService BrowserViewportService

@code
{
    private bool _loading;
    private string _searchString;
    private List<NotificationOut> _notifications = [];

    protected override async Task OnInitializedAsync()
    {
        _loading = true;
        _notifications = await GetNotificationsClient.Get();
        _loading = false;
    }

    private async Task OpenDialog()
    {
        var breakpoint = await BrowserViewportService.GetCurrentBreakpointAsync();
        var options = new DialogOptions {
            MaxWidth = MaxWidth.Small,
            FullWidth = true,
            FullScreen = breakpoint == Breakpoint.Xs,
        };
        var dialog = await DialogService.ShowAsync<CreateNotificationDialog>("", options);

        var result = await dialog.Result;

        if (result!.Canceled) return;
        
        await OnInitializedAsync();
    }

    private Func<NotificationOut, bool> _quickFilter => x => _searchString.IsIn(x.Title, x.Description);

    private string GetNotFoundMessage()
    {
        return (_searchString.IsEmpty()) ? "Não existem notificações cadastradas ainda." : "Nenhuma notificação encontrada.";
    }
}

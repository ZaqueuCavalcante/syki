@namespace Syki.Front.Features.Teacher.CreateLessonAttendance

<MudDialog>
    <TitleContent>
        <MudText Typo="Typo.h6">
            <MudIcon Icon="@Icons.Material.Filled.Class" Class="mr-1 mb-n1" />
            Selecione uma aula
        </MudText>
    </TitleContent>
    <DialogContent>
        <MudTable
            T="ClassLessonOut"
            Items="@Lessons"
            Class="mb-4"
            Breakpoint="Breakpoint.Sm"
            Dense
            Hover
            RowClass="cursor-pointer"
            OnRowClick="@HandleRowClick"
            RowsPerPage="100"
        >
            <HeaderContent>
                <MudTh>Aula</MudTh>
                <MudTh>Data</MudTh>
                <MudTh>Horário</MudTh>
                <MudTh>Status</MudTh>
                <MudTh>Frequência</MudTh>
            </HeaderContent>
            <RowTemplate>
                <MudTd DataLabel="Aula">@context.Number</MudTd>
                <MudTd DataLabel="Data">@context.Date</MudTd>
                <MudTd DataLabel="Horário">@context.Schedule</MudTd>
                <MudTd DataLabel="Status">@context.Status.GetDescription()</MudTd>
                <MudTd DataLabel="Frequência">
                    @if (context.Status == ClassLessonStatus.Finalized)
                    {
                        <MudProgressLinear Color="Color.Primary" Rounded Size="Size.Large" Value="@decimal.ToDouble(context.Frequency)" Style="height: 24px">
                            <MudText Typo="Typo.body1">
                                <b>@context.Frequency.Format()%</b>
                            </MudText>
                        </MudProgressLinear>
                    }
                </MudTd>
            </RowTemplate>
        </MudTable>
    </DialogContent>
</MudDialog>

@inject IBrowserViewportService BrowserViewportService

@code
{
    [CascadingParameter]
    IMudDialogInstance MudDialog { get; set; }

    [Parameter]
    public EventCallback<Guid> OnRowClick { get; set; }

    [Parameter]
    public List<ClassLessonOut> Lessons { get; set; } = [];

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();

        var breakpoint = await BrowserViewportService.GetCurrentBreakpointAsync();
        var options = MudDialog.Options with
        {
            FullWidth = true,
            CloseButton = true,
            MaxWidth = MaxWidth.Medium,
            FullScreen = breakpoint == Breakpoint.Xs
        };
        await MudDialog.SetOptionsAsync(options);

        Lessons = Lessons.Where(x => x.Date <= DateTime.UtcNow.ToDateOnly()).ToList();
    }

    private void Close()
    {
        MudDialog.Cancel();
    }

    private async Task HandleRowClick(TableRowClickEventArgs<ClassLessonOut> row)
    {
        Close();
        await OnRowClick.InvokeAsync(row.Item.Id);
    }
}

@using Syki.Front.Components.Agenda

@namespace Syki.Front.Pages.Student

@page "/student/enrollments"
@attribute [Authorize(Roles = "Student")]

<SykiPageTitle Title="Matrícula" />

<MudContainer Class="my-4 px-4">
    <SykiPageHeader Icon="@Icons.Material.Filled.Article" Title="Matrícula" />
    <MudContainer Class="px-0 my-4">
        @if (_loading && _enrollmentPeriod.Id.IsEmpty())
        {
            <MudContainer Class="px-0">
                <MudCard>
                    <MudCardContent>
                        <MudProgressLinear Color="Color.Info" Indeterminate />
                    </MudCardContent>
                </MudCard>
            </MudContainer>
        }
        else if (!_loading && _enrollmentPeriod.Id.IsEmpty())
        {
            <SykiPageAlert Text="A escolha das disciplinas só pode ser feita durante a vigência do Período de Matrícula."/>
        }
        else
        {
            <MudAlert NoIcon Class="mt-4 mb-4 pl-6" Severity="Severity.Normal" Variant="Variant.Text" Elevation="1">
                <MudText>
                    Selecione as disciplinas que você irá cursar nesse semestre.
                    O período de matrícula vai até <strong>@_enrollmentPeriod.EndAt.FormatBr()</strong>.
                </MudText>
            </MudAlert>

            <CascadingValue Name="Days" Value="@_days">
                <WeeklyAgenda Class="px-0 mb-4" />
            </CascadingValue>

            <MudContainer Class="px-0 mb-8">
                <MudTable
                    T="EnrollmentClassOut"
                    Items="@_options"
                    Class="pa-4"
                    Breakpoint="Breakpoint.Sm"
                    Dense
                    Hover
                    Loading="@_loading"
                    RowsPerPage="100">
                    <HeaderContent>
                        <MudTh>Disciplina</MudTh>
                        <MudTh>Período</MudTh>
                        <MudTh>Créditos</MudTh>
                        <MudTh>CH</MudTh>
                        <MudTh>Professor</MudTh>
                        <MudTh>Selecionada</MudTh>
                    </HeaderContent>
                    <RowTemplate>
                        <MudTd DataLabel="Disciplina">@context.Discipline</MudTd>
                        <MudTd DataLabel="Período">@context.Period</MudTd>
                        <MudTd DataLabel="Créditos">@context.Credits</MudTd>
                        <MudTd DataLabel="CH">@context.Workload</MudTd>
                        <MudTd DataLabel="Professor">@context.Teacher</MudTd>
                        <MudTd DataLabel="Selecionada">
                            <MudCheckBox
                                T="bool"
                                Class="pl-9 pr-1"
                                Dense
                                Size="Size.Small"
                                Color="Color.Success"
                                Value="@context.IsSelected"
                                ValueChanged="x => { context.IsSelected = x; HandleCheckedChanged(); }"
                            />
                        </MudTd>
                    </RowTemplate>
                    <NoRecordsContent>
                        Não existem turmas disponíveis no momento.
                    </NoRecordsContent>
                    <PagerContent>
                        <MudDivider/>
                        <MudStack Row Class="mt-4">
                            <SykiProgressCircular Loading="@_loading"/>
                            <DialogSaveButton OnClick="@Submit"/>
                        </MudStack>
                    </PagerContent>
                </MudTable>
            </MudContainer>
        }
    </MudContainer>
</MudContainer>

@inject ISnackbar Snackbar
@inject CreateStudentEnrollmentClient CreateStudentEnrollmentClient
@inject GetCurrentEnrollmentPeriodClient GetCurrentEnrollmentPeriodClient
@inject GetStudentEnrollmentClassesClient GetStudentEnrollmentClassesClient

@code
{
    private bool _loading;
    EnrollmentPeriodOut _enrollmentPeriod = new();
    private List<EnrollmentClassOut> _options = [];
    private List<AgendaDayOut> _days = [];

    protected override async Task OnInitializedAsync()
    {
        _loading = true;
        _enrollmentPeriod = await GetCurrentEnrollmentPeriodClient.Get();
        if (_enrollmentPeriod.Id.IsEmpty())
        {
            _loading = false;
            return;
        }
        _options = await GetStudentEnrollmentClassesClient.Get();
        HandleCheckedChanged();
        _loading = false;
    }

    private void HandleCheckedChanged()
    {
        _days = _options.Where(o => o.IsSelected).ToList().ToAgendas();
    }

    private async Task Submit()
    {
        if (_loading) return;

        _loading = true;
        var classes = _options.Where(o => o.IsSelected).Select(o => o.Id).ToList();
        var response = await CreateStudentEnrollmentClient.Create(classes);
        if (response.IsSuccessStatusCode)
        {
            Snackbar.Add("Matrícula salva com sucesso!", Severity.Success);
        }
        else
        {
            var error = await response.ToError();
            Snackbar.Add(error.Message, Severity.Error);
        }
        _loading = false;
    }
}

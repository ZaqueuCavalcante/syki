@namespace Syki.Front.Shared

@implements IAsyncDisposable

<MudNavMenu Rounded="true" Color="Color.Primary" Class="pa-2">
    <AuthorizeView Roles="@UserRole.Adm.ToString()">
        <MudNavLink Href="adm/users" Match="NavLinkMatch.Prefix" Icon="@Icons.Material.Filled.People" IconColor="Color.Inherit">Usuários</MudNavLink>
        <MudNavLink Href="adm/institutions" Match="NavLinkMatch.Prefix" Icon="@Icons.Material.Filled.School" IconColor="Color.Inherit">Instituições</MudNavLink>
        <MudNavLink Href="adm/feature-flags" Match="NavLinkMatch.Prefix" Icon="@Icons.Material.Filled.Flag" IconColor="Color.Inherit">Features</MudNavLink>
        <MudNavLink Href="adm/events" Match="NavLinkMatch.Prefix" Icon="@Icons.Material.Filled.StickyNote2" IconColor="Color.Inherit">Eventos</MudNavLink>
        <MudNavLink Href="adm/commands" Match="NavLinkMatch.Prefix" Icon="@Icons.Material.Filled.Task" IconColor="Color.Inherit">Comandos</MudNavLink>
        <MudNavLink Href="adm/batches" Match="NavLinkMatch.Prefix" Icon="@Icons.Material.Filled.BorderOuter" IconColor="Color.Inherit">Lotes</MudNavLink>
    </AuthorizeView>
    <AuthorizeView Roles="@UserRole.Academic.ToString()">
        <MudNavLink Href="academic/campi" Match="NavLinkMatch.Prefix" Icon="@Icons.Material.Filled.GroupWork" IconColor="Color.Inherit">Campi</MudNavLink>
        <MudNavLink Href="academic/courses" Match="NavLinkMatch.Prefix" Icon="@Icons.Material.Filled.Class" IconColor="Color.Inherit">Cursos</MudNavLink>
        <MudNavLink Href="academic/disciplines" Match="NavLinkMatch.Prefix" Icon="@Icons.Material.Filled.Apps" IconColor="Color.Inherit">Disciplinas</MudNavLink>
        <MudNavLink Href="academic/course-curriculums" Match="NavLinkMatch.Prefix" Icon="@Icons.Material.Filled.AccountTree" IconColor="Color.Inherit">Grades</MudNavLink>
        <MudNavLink Href="academic/course-offerings" Match="NavLinkMatch.Prefix" Icon="@Icons.Material.Filled.PlaylistAddCheck" IconColor="Color.Inherit">Ofertas</MudNavLink>
        <MudNavLink Href="academic/teachers" Match="NavLinkMatch.Prefix" Icon="@Icons.Material.Filled.Person4" IconColor="Color.Inherit">Professores</MudNavLink>
        <MudNavLink Href="academic/classes" Match="NavLinkMatch.Prefix" Icon="@Icons.Material.Filled.CenterFocusStrong" IconColor="Color.Inherit">Turmas</MudNavLink>
        <MudNavLink Href="academic/students" Match="NavLinkMatch.Prefix" Icon="@Icons.Material.Filled.People" IconColor="Color.Inherit">Alunos</MudNavLink>
        <MudNavLink Href="academic/classrooms" Match="NavLinkMatch.Prefix" Icon="@Icons.Material.Filled.VideoLabel" IconColor="Color.Inherit">Salas</MudNavLink>
        <MudNavLink Href="academic/academic-periods" Match="NavLinkMatch.Prefix" Icon="@Icons.Material.Filled.CalendarMonth" IconColor="Color.Inherit">Períodos</MudNavLink>
        <MudNavLink Href="academic/enrollment-periods" Match="NavLinkMatch.Prefix" Icon="@Icons.Material.Filled.Article" IconColor="Color.Inherit">Matrículas</MudNavLink>
        <MudNavLink Href="academic/notifications" Match="NavLinkMatch.Prefix" Icon="@Icons.Material.Filled.Notifications" IconColor="Color.Inherit">Notificações</MudNavLink>
        <MudNavLink Href="academic/webhooks" Match="NavLinkMatch.Prefix" Icon="@Icons.Material.Filled.Webhook" IconColor="Color.Inherit">Webhooks</MudNavLink>
    </AuthorizeView>
    <AuthorizeView Roles="@UserRole.Teacher.ToString()">
        <MudNavLink Href="teacher/agenda" Match="NavLinkMatch.Prefix" Icon="@Icons.Material.Filled.CalendarMonth" IconColor="Color.Inherit">Agenda</MudNavLink>
        <MudNavGroup Title="Turmas" Expanded="true" Icon="@Icons.Material.Filled.CenterFocusStrong">
            @foreach(var item in _teacherClasses)
            {
                <MudNavLink Href="@($"teacher/classes/{item.Id}")" Match="NavLinkMatch.Prefix">@item.Discipline</MudNavLink>
            }
        </MudNavGroup>
    </AuthorizeView>
    <AuthorizeView Roles="@UserRole.Student.ToString()">
        <MudNavLink Href="student/agenda" Match="NavLinkMatch.Prefix" Icon="@Icons.Material.Filled.CalendarMonth" IconColor="Color.Inherit">Agenda</MudNavLink>
        <MudNavLink Href="student/disciplines" Match="NavLinkMatch.Prefix" Icon="@Icons.Material.Filled.Apps" IconColor="Color.Inherit">Disciplinas</MudNavLink>
        <MudNavLink Href="student/notes" Match="NavLinkMatch.Prefix" Icon="@Icons.Material.Filled.StickyNote2" IconColor="Color.Inherit">Notas</MudNavLink>
        <MudNavLink Href="student/frequency" Match="NavLinkMatch.Prefix" Icon="@Icons.Material.Filled.Class" IconColor="Color.Inherit">Frequência</MudNavLink>
        @if (_currentEnrollmentPeriod.Id.HasValue())
        {
            <MudNavLink Href="student/enrollments" Match="NavLinkMatch.Prefix" Icon="@Icons.Material.Filled.Article" IconColor="Color.Inherit">Matrícula</MudNavLink>
        }
        <MudNavGroup Title="Turmas" Expanded="true" Icon="@Icons.Material.Filled.CenterFocusStrong">
            @foreach(var item in _studentClasses)
            {
                <MudNavLink Href="@($"student/classes/{item.Id}")" Match="NavLinkMatch.Prefix">@item.Discipline</MudNavLink>
            }
        </MudNavGroup>
    </AuthorizeView>
</MudNavMenu>

@inject AuthManager AuthManager
@inject SignalRConnectionManager SignalR
@inject ILocalStorageService LocalStorage
@inject GetTeacherCurrentClassesClient GetTeacherCurrentClassesClient
@inject GetStudentCurrentClassesClient GetStudentCurrentClassesClient
@inject GetCurrentEnrollmentPeriodClient GetCurrentEnrollmentPeriodClient

@code
{
    private EnrollmentPeriodOut _currentEnrollmentPeriod = new();
    private List<TeacherCurrentClassOut> _teacherClasses = [];
    private List<StudentCurrentClassOut> _studentClasses = [];

    protected override async Task OnInitializedAsync()
    {
        var user = await AuthManager.GetUser();
        if (user.Role == UserRole.Teacher)
        {
            _teacherClasses = await GetTeacherCurrentClassesClient.Get();
            await LocalStorage.SetItemAsync("Classes", _teacherClasses.ConvertAll(x => new CascadingClassDto(x.Id, x.Discipline)).Serialize());
        }
        if (user.Role == UserRole.Student)
        {
            _studentClasses = await GetStudentCurrentClassesClient.Get();
            _currentEnrollmentPeriod = await GetCurrentEnrollmentPeriodClient.Get();
            await LocalStorage.SetItemAsync("Classes", _studentClasses.ConvertAll(x => new CascadingClassDto(x.Id, x.Discipline)).Serialize());
        }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await base.OnAfterRenderAsync(firstRender);
        
        await ConnectWebsocket(firstRender);
    }

    private async Task ConnectWebsocket(bool firstRender)
    {
        if (!firstRender) return;

        var user = await AuthManager.GetUser();
        if (!user.IsAuthenticated) return;

        await SignalR.StartAsync();
    }

    public async ValueTask DisposeAsync()
    {
        await SignalR.StopAsync();
    }
}

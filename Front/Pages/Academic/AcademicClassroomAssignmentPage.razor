@using Syki.Front.Features.Academic.CreateClass
@using Syki.Front.Features.Academic.CreateTeacher
@using Syki.Front.Features.Academic.BuildClassroomAssignment
@using Syki.Front.Features.Academic.AssignDisciplinesToTeacher

@namespace Syki.Front.Pages.Academic

@page "/academic/classrooms/assignment"
@attribute [Authorize(Roles = "Academic")]

<SykiPageTitle Title="Ensalamento" />

<MudContainer Class="my-4 px-4">
    <MudGrid Class="align-center">
        <MudItem xs="12" sm="8" md="8" lg="8">
            <MudStack Row AlignItems="AlignItems.Center">
                <MudIcon Icon="@Icons.Material.Filled.Sort" Class="mb-1" Size="Size.Large"/>
                <MudText Typo="@Typo.h5" Style="font-weight: bold">Ensalamento - @_period.Id</MudText>
            </MudStack>
        </MudItem>
        <MudItem xs="12" sm="4" md="4" lg="4">
            <MudSelect
                Dense
                Label="Campus"
                Value="@_campus"
                Margin="Margin.Dense"
                Variant="Variant.Outlined"
                AdornmentColor="Color.Primary"
                ValueChanged="(GetCampiItemOut newValue) => HandleCampusChanged(newValue)"
            >
                @foreach (var item in _campi)
                {
                    <MudSelectItem Value="@item">@item.Name</MudSelectItem>
                }
            </MudSelect>
        </MudItem>
    </MudGrid>

    <MudCard Class="my-4 pa-4">
        <MudCardContent>
            <MudGrid Spacing="2">

                <MudItem xs="12" sm="12" md="12" lg="12">
                    <MudDataGrid
                        Dense
                        Hover
                        SortMode="SortMode.None"
                        Items="@_courseOfferings"
                    >
                        <Columns>
                            <PropertyColumn Property="x => x.Course" Title="@($"Ofertas de Curso ({_courseOfferings.Count})")" />
                            <PropertyColumn Property="x => _students.Count(s => s.CourseOfferingId == x.CourseOfferingId)" Title="Alunos" />
                            <PropertyColumn Property="x => x.Disciplines.Count" Title="Disciplinas" />
                        </Columns>
                        <NoRecordsContent>
                            <MudText Typo="Typo.body2">Nenhuma oferta de curso encontrada</MudText>
                        </NoRecordsContent>
                    </MudDataGrid>
                </MudItem>

                <MudItem xs="12" sm="12" md="12" lg="12">
                    <MudDataGrid
                        Dense
                        Hover
                        SortMode="SortMode.None"
                        Items="@_teachers"
                    >
                        <Columns>
                            <PropertyColumn Property="x => x.Name" Title="@($"Professores ({_teachers.Count})")" />
                            <PropertyColumn Property="x => x.Disciplines.Count(d => _disciplines.Select(y => y.Id).Contains(d))" Title="Disciplinas" />
                            <TemplateColumn CellClass="d-flex justify-end">
                                <CellTemplate>
                                    <MudTooltip Text="Disciplinas" Arrow Placement="Placement.Top" ShowOnFocus="false">
                                        <MudIconButton Size="@Size.Small" Icon="@Icons.Material.Filled.Apps" OnClick="@(() => OpenDisciplinesDrawer(context.Item.Id))" />
                                    </MudTooltip>
                                </CellTemplate>
                            </TemplateColumn>
                        </Columns>
                        <NoRecordsContent>
                            <MudText Typo="Typo.body2">Nenhum professor encontrado para este campus</MudText>
                        </NoRecordsContent>
                    </MudDataGrid>
                </MudItem>

                <MudItem xs="12" sm="12" md="12" lg="12">
                    <MudDataGrid
                        Dense
                        Hover
                        SortMode="SortMode.None"
                        Items="@_disciplines"
                    >
                        <Columns>
                            <PropertyColumn Property="x => x.Name" Title="@($"Disciplinas ({_disciplines.Count})")" />
                            <PropertyColumn Property="x => _teachers.Count(t => t.Disciplines.Contains(x.Id))" Title="Professores" />
                            <PropertyColumn Property="x => _students.Count(s => _courseOfferings.FirstOrDefault(c => c.CourseOfferingId == s.CourseOfferingId).Disciplines.Select(y => y.Id).Contains(x.Id))" Title="Alunos" />
                            <PropertyColumn Property="x => _classes.Where(c => c.DisciplineId == x.Id).Sum(c => c.Vacancies)" Title="Vagas" />

                            <TemplateColumn CellClass="d-flex justify-end">
                                <CellTemplate>
                                    @{
                                        var (icon, color, message) = GetDisciplineIconData(context.Item.Id);
                                    }
                                    <MudTooltip Text="@message" Arrow Placement="Placement.Top" ShowOnFocus="false">
                                        <MudIcon Size="@Size.Small" Icon="@icon" Color="@color" />
                                    </MudTooltip>
                                </CellTemplate>
                            </TemplateColumn>
                        </Columns>
                        <NoRecordsContent>
                            <MudText Typo="Typo.body2">Nenhuma disciplina encontrada</MudText>
                        </NoRecordsContent>
                    </MudDataGrid>
                </MudItem>
       
                <MudItem xs="12" sm="12" md="12" lg="12">
                    <MudDataGrid
                        Dense
                        Hover
                        SortMode="SortMode.None"
                        Items="@_students"
                    >
                        <Columns>
                            <PropertyColumn Property="x => x.Name" Title="@($"Alunos ({_students.Count})")" />
                            <PropertyColumn Property="x => _courseOfferings.FirstOrDefault(c => c.CourseOfferingId == x.CourseOfferingId).Course" Title="Oferta de Curso" />
                            <PropertyColumn Property="x => _disciplines.Count(d => _courseOfferings.FirstOrDefault(c => c.CourseOfferingId == x.CourseOfferingId).Disciplines.Select(y => y.Id).Contains(d.Id))" Title="Disciplinas" />
                        </Columns>
                        <NoRecordsContent>
                            <MudText Typo="Typo.body2">Nenhum aluno encontrado</MudText>
                        </NoRecordsContent>
                    </MudDataGrid>
                </MudItem>

            </MudGrid>
        </MudCardContent>
    </MudCard>

    <MudCard Class="my-4 pa-4">
        <MudCardContent>
            <MudGrid>
                <MudItem xs="12" sm="12" md="12" lg="12">
                    <MudStack Row AlignItems="AlignItems.Center" Justify="Justify.SpaceBetween">
                        <MudText Typo="Typo.h6" Style="font-weight: bold">Turmas (@_classes.Count)</MudText>
                        <MudButton
                            StartIcon="@Icons.Material.Outlined.Add"
                            IconSize="Size.Large"
                            Variant="Variant.Filled"
                            Size="Size.Medium"
                            Color="Color.Primary"
                            OnClick="@OpenNewClassDialog"
                        >
                            Nova Turma
                        </MudButton>
                    </MudStack>
                </MudItem>

                <MudItem xs="12" sm="12" md="12" lg="12">
                    <MudDataGrid
                        Dense
                        Hover
                        SortMode="SortMode.None"
                        Items="@_classes"
                    >
                        <Columns>
                            <PropertyColumn Property="x => x.Discipline" Title="Disciplina" />
                            <PropertyColumn Property="x => x.Teacher" Title="Professor" />
                            <PropertyColumn Property="x => x.Vacancies" Title="Vagas" />
                        </Columns>
                        <NoRecordsContent>
                            <MudText Typo="Typo.body2">Nenhuma turma encontrada</MudText>
                        </NoRecordsContent>
                    </MudDataGrid>
                </MudItem>
            </MudGrid>
        </MudCardContent>
    </MudCard>

    <MudCard Class="my-4 pa-4">
        <MudCardContent>
            <MudGrid>
                <MudItem xs="12" sm="12" md="12" lg="12">
                    <MudText Typo="Typo.h6" Style="font-weight: bold">Salas (@_classrooms.Count)</MudText>
                </MudItem>

                <MudItem xs="12" sm="12" md="12" lg="12">
                    <MudDataGrid
                        Dense
                        Hover
                        SortMode="SortMode.None"
                        Items="@_classrooms"
                    >
                        <Columns>
                            <PropertyColumn Property="x => x.Name" Title="Nome" />
                            <PropertyColumn Property="x => x.Capacity" Title="Capacidade" />
                            <TemplateColumn CellClass="d-flex justify-end">
                                <CellTemplate>
                                    <MudTooltip Text="Horários" Arrow Placement="Placement.Top" ShowOnFocus="false">
                                        <MudIconButton Size="@Size.Small" Icon="@Icons.Material.Filled.VideoLabel" OnClick="@(async () => await OpenAssignClassToClassroomDialog(context.Item))" />
                                    </MudTooltip>
                                </CellTemplate>
                            </TemplateColumn>
                        </Columns>
                        <NoRecordsContent>
                            <MudText Typo="Typo.body2">Nenhuma sala encontrada</MudText>
                        </NoRecordsContent>
                    </MudDataGrid>
                </MudItem>
            </MudGrid>
        </MudCardContent>
    </MudCard>
</MudContainer>

<AssignDisciplinesToTeacherDrawer @ref="@_disciplinesDrawer" AfterSubmit="@LoadData" />

@inject IDialogService DialogService
@inject GetCampiClient GetCampiClient
@inject GetClassroomsClient GetClassroomsClient
@inject GetCampusClassesClient GetCampusClassesClient
@inject IBrowserViewportService BrowserViewportService
@inject GetCampusTeachersClient GetCampusTeachersClient
@inject GetCampusStudentsClient GetCampusStudentsClient
@inject GetCurrentAcademicPeriodClient GetCurrentAcademicPeriodClient
@inject GetCampusCourseOfferingsClient GetCampusCourseOfferingsClient

@code
{
    private AcademicPeriodOut _period = new();
    private GetCampiItemOut _campus = new();
    private List<GetCampiItemOut> _campi = [];

    private List<GetClassroomsOut> _classrooms = [];
    private List<GetCampusClassesOut> _classes = [];
    private List<GetCampusTeachersOut> _teachers = [];
    private List<GetCampusStudentsOut> _students = [];
    private List<GetCampusCourseOfferingsOut> _courseOfferings = [];
    private List<GetCampusCourseOfferingsDisciplineOut> _disciplines = [];

    private AssignDisciplinesToTeacherDrawer _disciplinesDrawer = default!;

    protected override async Task OnInitializedAsync()
    {
        var periodResponse = await GetCurrentAcademicPeriodClient.Get();
        if (periodResponse.IsError) return;
        _period = periodResponse.Success;

        _campi = (await GetCampiClient.Get()).Items;
        _campus = _campi.FirstOrDefault() ?? new();

        await LoadData();
    }

    private async Task LoadData()
    {
        _teachers = await GetCampusTeachersClient.Get(_campus.Id);
        _students = await GetCampusStudentsClient.Get(_campus.Id);
        _courseOfferings = await GetCampusCourseOfferingsClient.Get(_campus.Id);
        _disciplines = _courseOfferings.SelectMany(x => x.Disciplines).OrderBy(x => x.Name).ToList();
        _classes = await GetCampusClassesClient.Get(_campus.Id);
        _classrooms = (await GetClassroomsClient.Get()).Where(x => x.CampusId == _campus.Id).ToList();
    }

    private async Task HandleCampusChanged(GetCampiItemOut newValue)
    {
        _campus = newValue;
        await LoadData();
    }

    private async Task OpenDisciplinesDrawer(Guid teacherId)
    {
        await _disciplinesDrawer.Open(teacherId);
    }

    private (string icon, Color color, string message) GetDisciplineIconData(Guid disciplineId)
    {
        var teachers = _teachers.Count(t => t.Disciplines.Contains(disciplineId));
        if (teachers == 0) return (Icons.Material.Filled.Error, Color.Error, "Disciplina sem professor");

        var students = _students.Count(s => _courseOfferings.FirstOrDefault(c => c.CourseOfferingId == s.CourseOfferingId).Disciplines.Select(y => y.Id).Contains(disciplineId));
        var vacancies = _classes.Where(c => c.DisciplineId == disciplineId).Sum(c => c.Vacancies);

        if (vacancies < students) return (Icons.Material.Filled.WarningAmber, Color.Warning, "Disciplina sem vagas suficientes");

        return (Icons.Material.Filled.CheckCircle, Color.Success, "Disciplina ok");
    }

    private async Task OpenNewClassDialog()
    {
        var breakpoint = await BrowserViewportService.GetCurrentBreakpointAsync();
        var options = new DialogOptions {
            MaxWidth = MaxWidth.Small,
            FullWidth = true,
            FullScreen = breakpoint == Breakpoint.Xs,
        };

        var parameters = new DialogParameters<CreateCampusClassDialog>();
        parameters.Add(x => x.Period, _period.Id);
        parameters.Add(x => x.CampusId, _campus.Id);
        parameters.Add(x => x.Teachers, _teachers);
        parameters.Add(x => x.Disciplines, _disciplines.Where(d => _teachers.Any(t => t.Disciplines.Contains(d.Id))).ToList());

        var dialog = await DialogService.ShowAsync<CreateCampusClassDialog>("", parameters, options);

        var result = await dialog.Result;

        if (result!.Canceled) return;
        
        _classes = await GetCampusClassesClient.Get(_campus.Id);
    }

    private async Task OpenAssignClassToClassroomDialog(GetClassroomsOut classroom)
    {
        var breakpoint = await BrowserViewportService.GetCurrentBreakpointAsync();
        var options = new DialogOptions {
            FullWidth = true,
            MaxWidth = MaxWidth.Large,
            FullScreen = breakpoint == Breakpoint.Xs,
        };

        var parameters = new DialogParameters<AssignClassToClassroomDialog>();
        parameters.Add(x => x.Classroom, classroom);
        parameters.Add(x => x.Classes, _classes);

        var dialog = await DialogService.ShowAsync<AssignClassToClassroomDialog>("", parameters, options);

        var result = await dialog.Result;

        if (result!.Canceled) return;
        
        _classes = await GetCampusClassesClient.Get(_campus.Id);
        _classrooms = (await GetClassroomsClient.Get()).Where(x => x.CampusId == _campus.Id).ToList();
    }
}
